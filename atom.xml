<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title> </title>
  
  <subtitle>...chasing dreams, living reality</subtitle>
  <link href="https://ooge0.github.io/hexo-blog/atom.xml" rel="self"/>
  
  <link href="https://ooge0.github.io/hexo-blog/"/>
  <updated>2025-01-27T07:27:07.774Z</updated>
  <id>https://ooge0.github.io/hexo-blog/</id>
  
  <author>
    <name>si0n4ra</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Software QA - Naming convention</title>
    <link href="https://ooge0.github.io/hexo-blog/qa/naming-convention/"/>
    <id>https://ooge0.github.io/hexo-blog/qa/naming-convention/</id>
    <published>2025-01-25T22:00:00.000Z</published>
    <updated>2025-01-27T07:27:07.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Загальні-правила-варіантів"><a href="#Загальні-правила-варіантів" class="headerlink" title="Загальні правила варіантів:"></a>Загальні правила варіантів:</h2><h3 id="Обов’язкові-частини"><a href="#Обов’язкові-частини" class="headerlink" title="Обов’язкові частини:"></a><strong>Обов’язкові частини:</strong></h3><ul><li><strong><code>[Department]:</code></strong> Назва департаменту (Support_department, Business_department, Finance_department).  </li><li><strong><code>[Layer/Component]:</code></strong> Шар (API, DB, UI, Business_department Logic) або функціональна частина додатку.  </li><li><strong><code>[Type]:</code></strong> Тип задачі (Bug, User Story, Task).  </li><li><strong>Short Description:</strong> Короткий опис проблеми чи функціоналу (до 10 слів).</li></ul><h3 id="Додаткові-частини-за-потребою"><a href="#Додаткові-частини-за-потребою" class="headerlink" title="Додаткові частини (за потребою):"></a><strong>Додаткові частини (за потребою):</strong></h3><ul><li><strong><code>[Feature/Component]:</code></strong> Конкретний функціонал (Payment System, Dashboard, Notifications).  </li><li><strong><code>[Priority]:</code></strong> Пріоритет задачі (High, Medium, Low).</li></ul><h3 id="Розділення"><a href="#Розділення" class="headerlink" title="Розділення:"></a><strong>Розділення:</strong></h3><ul><li>Використовувати квадратні дужки <code>[]</code> для кожної частини.  </li><li>Опис має бути лаконічним та інформативним.</li></ul><h3 id="Пріоритет-для-бізнес-логіки"><a href="#Пріоритет-для-бізнес-логіки" class="headerlink" title="Пріоритет для бізнес-логіки:"></a><strong>Пріоритет для бізнес-логіки:</strong></h3><h2 id="У-заголовках-слід-явно-виділяти-що-проблема-стосується-складної-бізнес-логіки-щоб-забезпечити-кращу-видимість-критичних-завдань"><a href="#У-заголовках-слід-явно-виділяти-що-проблема-стосується-складної-бізнес-логіки-щоб-забезпечити-кращу-видимість-критичних-завдань" class="headerlink" title="У заголовках слід явно виділяти, що проблема стосується складної бізнес-логіки, щоб забезпечити кращу видимість критичних завдань."></a>У заголовках слід явно виділяти, що проблема стосується складної бізнес-логіки, щоб забезпечити кращу видимість критичних завдань.</h2><h2 id="Варіант-1-Department-Layer-Component-Type-Short-Description"><a href="#Варіант-1-Department-Layer-Component-Type-Short-Description" class="headerlink" title="Варіант 1: [Department] [Layer&#x2F;Component] [Type] - [Short Description]"></a>Варіант 1: [Department] [Layer&#x2F;Component] [Type] - [Short Description]</h2><p><strong>Приклад:</strong>  </p><ul><li><code>[Support_department] [API] [Bug] - Incorrect response for invalid tokens</code>  </li><li><code>[Business_department] [DB] [User Story] - Add indexes for transaction history</code>  </li><li><code>[Finance_department] [UI] [Task] - Fix alignment issues on the dashboard</code>  </li><li><code>[Support_department] [Business_department Logic] [Bug] - Incorrect tax calculation for EU countries</code></li></ul><hr><h2 id="Варіант-2-Type-Department-Layer-Component-Short-Description"><a href="#Варіант-2-Type-Department-Layer-Component-Short-Description" class="headerlink" title="Варіант 2: [Type] [Department] [Layer&#x2F;Component] - [Short Description]"></a>Варіант 2: [Type] [Department] [Layer&#x2F;Component] - [Short Description]</h2><p><strong>Приклад:</strong>  </p><ul><li><code>[Bug] [Support_department] [Business_department Logic] - Overbooking issue in payment system</code>  </li><li><code>[User Story] [Business_department] [API] - Add endpoint for user account deactivation</code>  </li><li><code>[Task] [Finance_department] [UI] - Update error message for login failure</code>  </li><li><code>[Bug] [Support_department] [DB] - Deadlock issue during batch updates</code></li></ul><hr><h2 id="Варіант-3-Department-Type-Feature-Component-Layer-Short-Description"><a href="#Варіант-3-Department-Type-Feature-Component-Layer-Short-Description" class="headerlink" title="Варіант 3: [Department] [Type] [Feature&#x2F;Component] [Layer] - [Short Description]"></a>Варіант 3: [Department] [Type] [Feature&#x2F;Component] [Layer] - [Short Description]</h2><p><strong>Приклад:</strong>  </p><ul><li><code>[Support_department] [Bug] [Order Processing] [Business_department Logic] - Invalid discount application</code>  </li><li><code>[Business_department] [User Story] [Authentication] [API] - Support_department OAuth 2.0 for third-party apps</code>  </li><li><code>[Finance_department] [Task] [Reports] [DB] - Optimize query performance for large datasets</code>  </li><li><code>[Support_department] [Bug] [Dashboard] [UI] - Charts not loading in Safari browser</code></li></ul><hr><h2 id="Варіант-4-Department-Feature-Component-Layer-Priority-Type-Short-Description"><a href="#Варіант-4-Department-Feature-Component-Layer-Priority-Type-Short-Description" class="headerlink" title="Варіант 4: [Department] [Feature&#x2F;Component] [Layer] [Priority] [Type] - [Short Description]"></a>Варіант 4: [Department] [Feature&#x2F;Component] [Layer] [Priority] [Type] - [Short Description]</h2><p><strong>Приклад:</strong>  </p><ul><li><code>[Support_department] [Payments] [Business_department Logic] [High] [Bug] - Refunds not processed correctly</code>  </li><li><code>[Business_department] [User Profiles] [API] [Medium] [User Story] - Add Support_department for profile merging</code>  </li><li><code>[Finance_department] [Transaction History] [DB] [Low] [Task] - Add logs for failed transactions</code>  </li><li><code>[Support_department] [Dashboard] [UI] [High] [Bug] - Missing tooltip on hover</code></li></ul><hr><h2 id="Варіант-5-Layer-Department-Type-Feature-Component-Short-Description"><a href="#Варіант-5-Layer-Department-Type-Feature-Component-Short-Description" class="headerlink" title="Варіант 5: [Layer] [Department] [Type] [Feature&#x2F;Component] - [Short Description]"></a>Варіант 5: [Layer] [Department] [Type] [Feature&#x2F;Component] - [Short Description]</h2><p><strong>Приклад:</strong>  </p><ul><li><code>[API] [Business_department] [Bug] [Authentication] - Token expiration not handled correctly</code>  </li><li><code>[DB] [Support_department] [Task] [Order Processing] - Add foreign key constraints</code>  </li><li><code>[Business_department Logic] [Finance_department] [User Story] [Notifications] - Send weekly summary emails</code>  </li><li><code>[UI] [Business_department] [Bug] [Forms] - Dropdowns not working in mobile view</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;Загальні-правила-варіантів&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="QA" scheme="https://ooge0.github.io/hexo-blog/categories/QA/"/>
    
    
    <category term="qa" scheme="https://ooge0.github.io/hexo-blog/tags/qa/"/>
    
    <category term="qa_docs" scheme="https://ooge0.github.io/hexo-blog/tags/qa-docs/"/>
    
  </entry>
  
  <entry>
    <title>Postman tests tests for expertise</title>
    <link href="https://ooge0.github.io/hexo-blog/dev_side/postman_tests_for_expertise/"/>
    <id>https://ooge0.github.io/hexo-blog/dev_side/postman_tests_for_expertise/</id>
    <published>2025-01-25T15:32:05.000Z</published>
    <updated>2025-01-27T08:04:36.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>Below are examples of Postman tests with implemented logic where data is passed through variables, scripts and in a loop to repeat scripts by passing data (values) in some range.</em></p><p><em>Prerequisites</em> </p><ol><li><code>&#123;&#123;base_url&#125;&#125;</code> &#x3D; <a href="https://jsonplaceholder.typicode.com/">https://jsonplaceholder.typicode.com</a></li><li>Given GET API request for retrieving posts : <code>&#123;&#123;base_url&#125;&#125;/posts</code></li><li>Given GET API request for retrieving post by its ID : <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;id&#125;&#125;</code></li><li>Goal:<ol><li>To make Postman script for executing API request (GET, <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;post_id&#125;&#125;</code>) for getting data about posts by their IDs that were saved from the original request (GET,  <code>&#123;&#123;base_url&#125;&#125;/posts</code></li></ol></li></ol><p><strong>Actions:</strong></p><ol><li>Create new <em>Environment</em> </li><li>For <strong>GET</strong>,  <code>&#123;&#123;base_url&#125;&#125;/posts</code> request, to add for <em>post-request</em> script:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save the response to an environment variable</span></span><br><span class="line"><span class="keyword">const</span> responseData = pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line"><span class="comment">// Extract all IDs from the response</span></span><br><span class="line"><span class="keyword">const</span> ids = responseData.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save the list of IDs and initialize the index</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;ids&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(ids));</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;currentIndex&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the next request to process the first ID</span></span><br><span class="line">pm.<span class="property">execution</span>.<span class="title function_">setNextRequest</span>(<span class="string">&quot;Process Post by ID&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><img src="/hexo-blog/images/postman_tests_for_expertise_pic_1.png"><ol start="2"><li><p>For <strong>GET</strong>,  <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;post_id&#125;&#125;</code> request, to add for <em>pre-request</em> script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve the list of IDs and the current index</span></span><br><span class="line"><span class="keyword">const</span> ids = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;ids&quot;</span>));</span><br><span class="line"><span class="keyword">let</span> currentIndex = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;currentIndex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure currentIndex is a valid number</span></span><br><span class="line">currentIndex = <span class="built_in">parseInt</span>(currentIndex, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (currentIndex &lt; ids.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// Set the current post_id for the request</span></span><br><span class="line">    pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;post_id&quot;</span>, ids[currentIndex]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;All IDs have been processed.&quot;</span>);</span><br><span class="line">    pm.<span class="property">execution</span>.<span class="title function_">setNextRequest</span>(<span class="literal">null</span>); <span class="comment">// Stop execution when done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/postman_tests_for_expertise_pic_2.png"></li><li><p>For <strong>GET</strong>,  <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;post_id&#125;&#125;</code> request, to add for <em>post-request</em> script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Increment the index after processing the current request</span></span><br><span class="line"><span class="keyword">let</span> currentIndex = pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;currentIndex&quot;</span>);</span><br><span class="line">currentIndex = <span class="built_in">parseInt</span>(currentIndex, <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save the updated index</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="string">&quot;currentIndex&quot;</span>, currentIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if there are more IDs to process</span></span><br><span class="line"><span class="keyword">const</span> ids = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;ids&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (currentIndex &lt; ids.<span class="property">length</span>) &#123;</span><br><span class="line">    pm.<span class="property">execution</span>.<span class="title function_">setNextRequest</span>(<span class="string">&quot;Process Post by ID&quot;</span>); <span class="comment">// Repeat for the next ID</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Finished processing all IDs.&quot;</span>);</span><br><span class="line">    pm.<span class="property">execution</span>.<span class="title function_">setNextRequest</span>(<span class="literal">null</span>); <span class="comment">// Stop execution</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><img src="/hexo-blog/images/postman_tests_for_expertise_pic_3.png"><ol start="4"><li>Execute GET,  <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;post_id&#125;&#125;</code> request as many times as needed. Added scripts help to iterate over all <code>post_id&#39;s</code> that retrieved from the first <strong>GET</strong>,  <code>&#123;&#123;base_url&#125;&#125;/posts/&#123;&#123;post_id&#125;&#125;</code> request. Control process of execution by checking Postman console output</li></ol><img src="/hexo-blog/images/postman_tests_for_expertise_pic_4.png">   ]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;Below are examples of Postman test</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="dev_side" scheme="https://ooge0.github.io/hexo-blog/tags/dev-side/"/>
    
    <category term="postman" scheme="https://ooge0.github.io/hexo-blog/tags/postman/"/>
    
    <category term="api_testing" scheme="https://ooge0.github.io/hexo-blog/tags/api-testing/"/>
    
    <category term="qa" scheme="https://ooge0.github.io/hexo-blog/tags/qa/"/>
    
    <category term="API" scheme="https://ooge0.github.io/hexo-blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>REST API testing improvements</title>
    <link href="https://ooge0.github.io/hexo-blog/qa/rest_api_testing_improvements/"/>
    <id>https://ooge0.github.io/hexo-blog/qa/rest_api_testing_improvements/</id>
    <published>2025-01-24T22:00:00.000Z</published>
    <updated>2025-01-26T18:51:28.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Enhancements-for-REST-API-Responses-and-Headers"><a href="#Enhancements-for-REST-API-Responses-and-Headers" class="headerlink" title="Enhancements for REST API Responses and Headers"></a>Enhancements for REST API Responses and Headers</h1><h2 id="Response-Body-Enhancements"><a href="#Response-Body-Enhancements" class="headerlink" title="Response Body Enhancements"></a>Response Body Enhancements</h2><ol><li><p><strong>Unique Identifier for Query Execution</strong></p><ul><li>Include a <code>query_id</code> or <code>execution_id</code> for debugging and tracking specific requests.</li></ul></li><li><p><strong>Performance Metrics</strong></p><ul><li><strong>Query Execution Time</strong>: Time taken to execute the SQL query (in ms or seconds).</li><li><strong>Data Processing Time</strong>: Time taken to process or transform data.</li><li><strong>Total Response Time</strong>: End-to-end time from request receipt to response generation.</li></ul></li><li><p><strong>Pagination Information</strong></p><ul><li><code>total_records</code>: Total number of records in the result set.</li><li><code>page_size</code>: Number of records in the current response.</li><li><code>current_page</code>: Current page number.</li><li><code>total_pages</code>: Total number of pages.</li></ul></li><li><p><strong>Data Summary</strong></p><ul><li><strong>Row Count</strong>: Number of rows returned in the response.</li><li><strong>Aggregates</strong>: Optional aggregates like sums, averages, or counts.</li></ul></li><li><p><strong>Request Metadata</strong></p><ul><li>Echo relevant parts of the request (e.g., query parameters, filters, sorting).</li></ul></li><li><p><strong>Error Details (if applicable)</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DB_TIMEOUT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The database query timed out.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-01-26T12:34:56Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Data Source Metadata</strong></p><ul><li><code>source_db</code>: Name of the database or schema.</li><li><code>query_type</code>: Type of query executed (e.g., SELECT, UPDATE).</li><li><code>rows_scanned</code>: Number of rows scanned to produce the result.</li></ul></li></ol><hr><h2 id="Response-Headers-Enhancements"><a href="#Response-Headers-Enhancements" class="headerlink" title="Response Headers Enhancements"></a>Response Headers Enhancements</h2><ol><li><p><strong>Performance Metrics</strong></p><ul><li><code>X-Query-Execution-Time</code>: Time taken for the SQL query execution.</li><li><code>X-Processing-Time</code>: Time taken to process the data.</li><li><code>X-Total-Response-Time</code>: Total time for the request.</li></ul></li><li><p><strong>Rate Limiting</strong></p><ul><li><code>X-RateLimit-Limit</code>: Maximum number of requests allowed.</li><li><code>X-RateLimit-Remaining</code>: Remaining requests in the current window.</li><li><code>X-RateLimit-Reset</code>: Time when the rate limit resets.</li></ul></li><li><p><strong>Request ID</strong></p><ul><li><code>X-Request-ID</code>: Unique identifier for the request.</li></ul></li><li><p><strong>Cache Control</strong></p><ul><li><code>Cache-Control</code>: Specify cache duration or indicate no-cache.</li><li><code>ETag</code>: Unique hash for cache validation.</li></ul></li><li><p><strong>Pagination</strong></p><ul><li><code>X-Total-Records</code>: Total records in the data set.</li><li><code>X-Page-Size</code>: Number of records per page.</li><li><code>X-Current-Page</code>: Current page number.</li><li><code>X-Total-Pages</code>: Total number of pages.</li></ul></li><li><p><strong>Security</strong></p><ul><li><code>X-Content-Type-Options</code>: <code>nosniff</code> to prevent MIME type sniffing.</li><li><code>X-Frame-Options</code>: <code>DENY</code> to prevent clickjacking.</li><li><code>Content-Security-Policy</code>: Define secure data handling policies.</li></ul></li><li><p><strong>Custom Headers</strong></p><ul><li><code>X-Query-ID</code>: Unique query identifier.</li><li><code>X-Data-Checksum</code>: Hash or checksum of the returned data for integrity verification.</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;Enhancements-for-REST-API-Respons</summary>
      
    
    
    
    <category term="QA" scheme="https://ooge0.github.io/hexo-blog/categories/QA/"/>
    
    
    <category term="qa" scheme="https://ooge0.github.io/hexo-blog/tags/qa/"/>
    
    <category term="rest_api" scheme="https://ooge0.github.io/hexo-blog/tags/rest-api/"/>
    
  </entry>
  
  <entry>
    <title>Psychology. Confirmatory Factor Analysis (CFA) for Bifactor Model</title>
    <link href="https://ooge0.github.io/hexo-blog/psy/confirmatory_factor_analysis_cfa_for_bifactor_model/"/>
    <id>https://ooge0.github.io/hexo-blog/psy/confirmatory_factor_analysis_cfa_for_bifactor_model/</id>
    <published>2024-12-31T23:01:01.000Z</published>
    <updated>2025-01-07T08:00:51.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Confirmatory-Factor-Analysis-CFA-for-Bifactor-Model"><a href="#Confirmatory-Factor-Analysis-CFA-for-Bifactor-Model" class="headerlink" title="Confirmatory Factor Analysis (CFA) for Bifactor Model"></a>Confirmatory Factor Analysis (CFA) for Bifactor Model</h3><p>The following Python code demonstrates how to perform a confirmatory factor analysis (CFA) for a bifactor model with orthogonal factors using the <code>semopy</code> library. The model includes two specific latent factors: Optimism and Pessimism, along with a general latent factor, Dispositional. The dataset is expected to be in CSV format with 521 observations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import necessary libraries</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> semopy <span class="keyword">import</span> Model, ModelMeans, fit, calc_stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the data (replace &#x27;data.csv&#x27; with the actual path to your dataset)</span></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the bifactor model with orthogonal factors</span></span><br><span class="line"><span class="comment"># Using lavaan-style syntax</span></span><br><span class="line">descriptor = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # General latent factor</span></span><br><span class="line"><span class="string">    Dispositional =~ Q1 + Q4 + Q10 + Q3 + Q7 + Q9 + Q11 + Q12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Specific latent factors</span></span><br><span class="line"><span class="string">    Optimism =~ Q1 + Q4 + Q10 + Q11</span></span><br><span class="line"><span class="string">    Pessimism =~ Q3 + Q7 + Q9 + Q12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Orthogonality constraints</span></span><br><span class="line"><span class="string">    Optimism ~~ 0*Pessimism</span></span><br><span class="line"><span class="string">    Optimism ~~ 0*Dispositional</span></span><br><span class="line"><span class="string">    Pessimism ~~ 0*Dispositional</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create and fit the model</span></span><br><span class="line">model = Model(descriptor)</span><br><span class="line">res = model.fit(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate fit statistics</span></span><br><span class="line">stats = calc_stats(model, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print results</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Fit statistics:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(stats)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display factor loadings</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFactor Loadings:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(model.inspect(<span class="string">&quot;mx&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save results to CSV</span></span><br><span class="line">results_df = pd.DataFrame(stats, index=[<span class="number">0</span>])</span><br><span class="line">results_df.to_csv(<span class="string">&quot;fit_statistics.csv&quot;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><ol><li><strong>Library</strong>: The <code>semopy</code> library is used for structural equation modeling in Python.<ol><li><a href="https://arxiv.org/pdf/1905.09376">Read paper <code>semopy: A Python package for Structural Equation Modeling.G. Meshcheryakov, A. Igolkina. 2019.</code> on arxiv.org</a></li><li><a href="https://arxiv.org/pdf/2106.01140">Read paper <code>semopy 2: A Structural Equation Modeling Package with Random Effects in Python. 2021.</code> on arxiv.org</a></li></ol></li><li><strong>Data Input</strong>: Replace <code>data.csv</code> with the path to your CSV file.</li><li><strong>Model Syntax</strong>: The <code>descriptor</code> variable defines the bifactor model, including general and specific factors. Orthogonality constraints are included.</li><li><strong>Fit Statistics</strong>: Fit indices such as χ², df, CFI, TLI, RMSEA, and SRMR are calculated and printed.</li></ol><h3 id="Relevant-Research-Articles"><a href="#Relevant-Research-Articles" class="headerlink" title="Relevant Research Articles"></a>Relevant Research Articles</h3><ul><li><strong>Paper</strong>: Confirmatory Factor Analysis for Applied Research by Timothy A. Brown<ul><li>DOI: 10.1037&#x2F;0033-2909.112.1.155</li><li><a href="https://psycnet.apa.org/doi/10.1037/0033-2909.112.1.155">Read paper <code>Confirmatory Factor Analysis for Applied Research by Timothy A. Brown</code> on psycnet.apa.org</a></li><li><a href="https://sci-hub.se/https://psycnet.apa.org/doi/10.1037/0033-2909.112.1.155">Read paper <code>Confirmatory Factor Analysis for Applied Research by Timothy A. Brown</code> on sci-hub.se</a></li></ul></li></ul><h3 id="Recommended-Books-for-Mathematical-Foundations"><a href="#Recommended-Books-for-Mathematical-Foundations" class="headerlink" title="Recommended Books for Mathematical Foundations"></a>Recommended Books for Mathematical Foundations</h3><h4 id="Russian"><a href="#Russian" class="headerlink" title="Russian"></a>Russian</h4><ol><li><strong>Быстров В.П.</strong> - “Математическая статистика: теория и применение”</li><li><strong>Морозов М.В.</strong> - “Основы факторного анализа”</li></ol><h4 id="English"><a href="#English" class="headerlink" title="English"></a>English</h4><ol><li><strong>Raykov &amp; Marcoulides</strong> - “Introduction to Psychometric Theory”</li><li><strong>Keith F. Widaman</strong> - “Factor Analysis in Social Research”</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;Confirmatory-Factor-Analysis-CFA-</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="psy" scheme="https://ooge0.github.io/hexo-blog/tags/psy/"/>
    
  </entry>
  
  <entry>
    <title>Bokeh. List of references.</title>
    <link href="https://ooge0.github.io/hexo-blog/data_visualization/bokeh_list_of_references/"/>
    <id>https://ooge0.github.io/hexo-blog/data_visualization/bokeh_list_of_references/</id>
    <published>2024-12-29T17:34:12.000Z</published>
    <updated>2025-01-09T19:58:59.986Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>This post related to:</em></p><ol><li><a href="hexo-blog/data_visualization/list_of_data_vizualization_tools">Exploring data visuzlization tools.</a></li><li><a href="hexo-blog/data_visualization/plotly_chart_types_examples">Exploring plotly chart types with examples.</a></li></ol><hr><hr><p><strong>List of references</strong></p><ol><li><a href="https://habr.com/ru/companies/otus/articles/755358/">Изучаем Анализ данных с помощью библиотеки Bokeh в Python</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;This post related to:&lt;/em&gt;&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="plotly" scheme="https://ooge0.github.io/hexo-blog/tags/plotly/"/>
    
    <category term="data_visualization" scheme="https://ooge0.github.io/hexo-blog/tags/data-visualization/"/>
    
    <category term="data_analysis" scheme="https://ooge0.github.io/hexo-blog/tags/data-analysis/"/>
    
  </entry>
  
  <entry>
    <title>List of data vizualization tools</title>
    <link href="https://ooge0.github.io/hexo-blog/data_visualization/list_of_data_vizualization_tools/"/>
    <id>https://ooge0.github.io/hexo-blog/data_visualization/list_of_data_vizualization_tools/</id>
    <published>2024-12-29T17:34:12.000Z</published>
    <updated>2025-01-10T17:17:06.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>This post related to:</em></p><ol><li><a href="hexo-blog/data_visualization/list_of_data_vizualization_tools">Exploring plotly chart types with examples</a></li><li><a href="hexo-blog/data_visualization/bokeh_list_of_references">Bokeh. List of references.</a></li></ol><hr><h2 id="Bokeh"><a href="#Bokeh" class="headerlink" title="Bokeh"></a>Bokeh</h2><p>Read about Bokeh on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Bokeh">the glossary <code>Bokeh</code> page</a></p><hr><h2 id="Plotly"><a href="#Plotly" class="headerlink" title="Plotly"></a>Plotly</h2><p>Find more about Plotly in the <a href="hexo-blog/data_visualization/plotly_chart_types_examples">post: <code>Exploring plotly chart types with examples</code></a></p><p>Read about Plotly on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Plotly">the glossary <code>Plotly</code> page</a></p><hr><h2 id="MatPloitLib"><a href="#MatPloitLib" class="headerlink" title="MatPloitLib"></a>MatPloitLib</h2><p>Read about Seaborn on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#MatPloitLib">the glossary <code>MatPloitLib</code> page</a></p><hr><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Read about Seaborn on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Pandas">the glossary <code>Pandas</code> page</a></p><hr><h2 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h2><p>Read about Seaborn on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Seaborn">the glossary <code>Seaborn </code> page</a></p><hr><h2 id="Tableau"><a href="#Tableau" class="headerlink" title="Tableau"></a>Tableau</h2><p>Read about Tableau on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Tableau">the glossary <code>Tableau</code> page</a></p><hr><h2 id="Vega-Altair"><a href="#Vega-Altair" class="headerlink" title="Vega-Altair"></a>Vega-Altair</h2><p>Read about Vega-Altair on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#Vega-Altair">the glossary <code>Vega-Altair</code> page</a></p><h2 id="HoloViz"><a href="#HoloViz" class="headerlink" title="HoloViz"></a>HoloViz</h2><p>Read about Tableau on <a href="/hexo-blog/ai/glossary-of-machine-learning-and-ai-terms#HoloViz">the glossary <code>HoloViz</code> page</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;This post related to:&lt;/em&gt;&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="data_visualization" scheme="https://ooge0.github.io/hexo-blog/tags/data-visualization/"/>
    
    <category term="bokeh" scheme="https://ooge0.github.io/hexo-blog/tags/bokeh/"/>
    
  </entry>
  
  <entry>
    <title>Exploring plotly chart types with examples</title>
    <link href="https://ooge0.github.io/hexo-blog/data_visualization/plotly_chart_types_examples/"/>
    <id>https://ooge0.github.io/hexo-blog/data_visualization/plotly_chart_types_examples/</id>
    <published>2024-12-29T17:34:12.000Z</published>
    <updated>2025-01-10T05:10:01.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Plotly is a powerful Python library for creating interactive and visually appealing charts.<br>It supports a variety of chart types, catering to diverse data visualization needs.<br>This guide showcases some of the most common chart types available in Plotly, along with implementation examples.</p><p>All examples presented below were created using references from <a href="https://dash.plotly.com/tutorial">Plotly tutorial page</a></p><hr><p><a href="#chart-types" style="float: left; margin-left: 10px;">Chart Types</a><br><br></p><h3 id="Chart-Types"><a href="#Chart-Types" class="headerlink" title="Chart Types"></a>Chart Types</h3><ol><li><a href="#line-chart">Line Chart</a>  </li><li><a href="#scatter-plot">Scatter Plot</a>  </li><li><a href="#bar-chart">Bar Chart</a>  </li><li><a href="#pie-chart">Pie Chart</a>  </li><li><a href="#box-plot">Box Plot</a> </li><li><a href="#heatmap">Heatmap</a></li><li><a href="#histogram">Histogram</a></li><li><a href="#bubble-chart">Bubble Chart</a></li><li><a href="#area-chart">Area Chart</a></li><li><a href="#contour-plot">Contour Plot</a></li><li><a href="#3d-surface-plot">3D Surface Plot</a></li><li><a href="#candlestick-chart">Candlestick Chart</a></li><li><a href="#ohlc-chart">OHLC Chart</a></li><li><a href="#violin-plot">Violin Plot</a></li><li><a href="#choropleth-map">Choropleth Map</a></li><li><a href="#scatter-map">Scatter Map</a></li><li><a href="#sunburst-chart">Sunburst Chart</a></li><li><a href="#treemap-chart">Treemap Chart</a></li><li><a href="#parallel-coordinates-plot">Parallel Coordinates Plot</a></li></ol><hr><p id ="line-chart">Line Chart</p><p>A line chart is ideal for visualizing data trends over time, with data points connected by straight lines.  </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">line_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A line chart is ideal for visualizing data trends over time, with data points connected by straight lines.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Year&#x27;</span>: [<span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">14</span>]&#125;</span><br><span class="line">    fig = px.line(data, x=<span class="string">&#x27;Year&#x27;</span>, y=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Line Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_line_chart.png" title="plotly_line_chart" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><br><p id ="scatter-plot">Scatter Plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scatter_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A scatter plot displays the relationship between two numerical variables using dots.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Variable1&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="string">&#x27;Variable2&#x27;</span>: [<span class="number">15</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">55</span>]&#125;</span><br><span class="line">    fig = px.scatter(data, x=<span class="string">&#x27;Variable1&#x27;</span>, y=<span class="string">&#x27;Variable2&#x27;</span>, title=<span class="string">&#x27;Scatter Plot Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_scatter_plot.png"  title="plotly_scatter_plot" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="bar-chart">Bar Chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bar_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Bar charts are used to compare categorical data, with rectangular bars representing values.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Category&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;</span><br><span class="line">    fig = px.bar(data, x=<span class="string">&#x27;Category&#x27;</span>, y=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Bar Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_bar_chart.png" title="plotly_bar_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="#pie-chart">Pie chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pie_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A pie chart divides data into slices to illustrate proportions.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Category&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;</span><br><span class="line">    fig = px.pie(data, names=<span class="string">&#x27;Category&#x27;</span>, values=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Pie Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_pie_chart.png" title="plotly_pie_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="#box-plot">Box Plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">box_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Box plots summarize data distribution through their quartiles, highlighting outliers.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Category&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">23</span>]&#125;</span><br><span class="line">    fig = px.box(data, x=<span class="string">&#x27;Category&#x27;</span>, y=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Box Plot Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_box_plot.png" title="plotly_box_plot"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="heatmap">Heatmap</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heatmap</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Heatmaps display data intensity using varying colors in a grid layout.&quot;&quot;&quot;</span></span><br><span class="line">    data = np.random.rand(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    fig = px.imshow(data, color_continuous_scale=<span class="string">&#x27;Viridis&#x27;</span>, title=<span class="string">&#x27;Heatmap Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_heatmap.png" title="plotly_heatmap"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="histogram">Histogram</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">histogram</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Histograms display the distribution of a dataset by grouping data into bins.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Values&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]&#125;</span><br><span class="line">    fig = px.histogram(data, x=<span class="string">&#x27;Values&#x27;</span>, title=<span class="string">&#x27;Histogram Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_histogram.png" title="plotly_histogram"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="bubble-chart">Bubble Chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Bubble charts extend scatter plots with a third dimension using bubble size.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;X&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="string">&#x27;Y&#x27;</span>: [<span class="number">15</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">55</span>], <span class="string">&#x27;Size&#x27;</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>]&#125;</span><br><span class="line">    fig = px.scatter(data, x=<span class="string">&#x27;X&#x27;</span>, y=<span class="string">&#x27;Y&#x27;</span>, size=<span class="string">&#x27;Size&#x27;</span>, title=<span class="string">&#x27;Bubble Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_bubble_chart.png" title="plotly_bubble_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="area-chart">Area chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Area charts show quantitative data over time, emphasizing magnitude.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Year&#x27;</span>: [<span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">14</span>]&#125;</span><br><span class="line">    fig = px.area(data, x=<span class="string">&#x27;Year&#x27;</span>, y=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Area Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_area_chart.png" title="plotly_area_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="contour-plot">Contour Plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">contour_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Contour plots display three-dimensional data in two dimensions with contour lines.&quot;&quot;&quot;</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    z = np.sin(x[:, <span class="literal">None</span>] * y[<span class="literal">None</span>, :])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a contour plot using go.Contour</span></span><br><span class="line">    fig = go.Figure(go.Contour(</span><br><span class="line">        z=z,</span><br><span class="line">        x=x,</span><br><span class="line">        y=y,</span><br><span class="line">        colorscale=<span class="string">&#x27;Viridis&#x27;</span>,</span><br><span class="line">        colorbar=<span class="built_in">dict</span>(title=<span class="string">&quot;Value&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    fig.update_layout(title=<span class="string">&#x27;Contour Plot Example&#x27;</span>, xaxis_title=<span class="string">&quot;X&quot;</span>, yaxis_title=<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_contour_plot.png" title="plotly_contour_plot"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="3d-surface-plot">3D surface plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">three_d_surface_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;3D surface plots provide a three-dimensional representation of data, showing relationships in three dimensions.&quot;&quot;&quot;</span></span><br><span class="line">    x = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">    y = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">    x, y = np.meshgrid(x, y)</span><br><span class="line">    z = np.sin(np.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    fig = go.Figure(data=[go.Surface(z=z, x=x, y=y)])</span><br><span class="line">    fig.update_layout(title=<span class="string">&#x27;3D Surface Plot Example&#x27;</span>,</span><br><span class="line">                      scene=&#123;<span class="string">&#x27;xaxis_title&#x27;</span>: <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;yaxis_title&#x27;</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;zaxis_title&#x27;</span>: <span class="string">&#x27;Z&#x27;</span>&#125;)</span><br><span class="line">    fig.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_three_d_surface_plot.png" title="plotly_three_d_surface_plot"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="candlestick-chart">Candlestick Chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">candlestick_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Candlestick charts are used to visualize stock price movements over time, displaying the opening, closing, high, and low prices.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;Date&#x27;</span>: [<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-02&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>, <span class="string">&#x27;2021-01-04&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Open&#x27;</span>: [<span class="number">100</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">107</span>],</span><br><span class="line">        <span class="string">&#x27;High&#x27;</span>: [<span class="number">105</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">110</span>],</span><br><span class="line">        <span class="string">&#x27;Low&#x27;</span>: [<span class="number">98</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">104</span>],</span><br><span class="line">        <span class="string">&#x27;Close&#x27;</span>: [<span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">109</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fig = go.Figure(</span><br><span class="line">        data=[</span><br><span class="line">            go.Candlestick(x=data[<span class="string">&#x27;Date&#x27;</span>], <span class="built_in">open</span>=data[<span class="string">&#x27;Open&#x27;</span>], high=data[<span class="string">&#x27;High&#x27;</span>], low=data[<span class="string">&#x27;Low&#x27;</span>], close=data[<span class="string">&#x27;Close&#x27;</span>])])</span><br><span class="line">    fig.update_layout(title=<span class="string">&#x27;Candlestick Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_candlestick_chart.png" title="plotly_candlestick_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="ohlc-chart">OHLC</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ohlc_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;OHLC (Open, High, Low, Close) charts are used for visualizing financial data with four key values for each period.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;Date&#x27;</span>: [<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-02&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>, <span class="string">&#x27;2021-01-04&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Open&#x27;</span>: [<span class="number">100</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">107</span>],</span><br><span class="line">        <span class="string">&#x27;High&#x27;</span>: [<span class="number">105</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">110</span>],</span><br><span class="line">        <span class="string">&#x27;Low&#x27;</span>: [<span class="number">98</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">104</span>],</span><br><span class="line">        <span class="string">&#x27;Close&#x27;</span>: [<span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">109</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fig = go.Figure(</span><br><span class="line">        data=[go.Ohlc(x=data[<span class="string">&#x27;Date&#x27;</span>], <span class="built_in">open</span>=data[<span class="string">&#x27;Open&#x27;</span>], high=data[<span class="string">&#x27;High&#x27;</span>], low=data[<span class="string">&#x27;Low&#x27;</span>], close=data[<span class="string">&#x27;Close&#x27;</span>])])</span><br><span class="line">    fig.update_layout(title=<span class="string">&#x27;OHLC (Open, High, Low, Close)) Chart Example &#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_ohlc_chart.png" title="plotly_ohlc_chart"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="violin-plot">Violin plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">violin_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Violin plots combine aspects of box plots and density plots to display data distribution.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Category&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">23</span>]&#125;</span><br><span class="line">    fig = px.violin(data, x=<span class="string">&#x27;Category&#x27;</span>, y=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Violin Plot Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_violin_plot.png" title="plotly_violin_plot"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="choropleth-map">Choropleth Map</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choropleth_map</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Choropleth maps visualize data geographically, with color shading to represent values.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Country&#x27;</span>: [<span class="string">&#x27;USA&#x27;</span>, <span class="string">&#x27;Canada&#x27;</span>, <span class="string">&#x27;Mexico&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;</span><br><span class="line">    fig = px.choropleth(data, locations=<span class="string">&#x27;Country&#x27;</span>, color=<span class="string">&#x27;Value&#x27;</span>, title=<span class="string">&#x27;Choropleth Map Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_choropleth_map.png" title="plotly_choropleth_map"  style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="scatter-map">Scatter Map</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scatter_map</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Scatter maps visualize geographical data with points plotted on a map.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Latitude&#x27;</span>: [<span class="number">34.0522</span>, <span class="number">40.7128</span>, <span class="number">41.8781</span>], <span class="string">&#x27;Longitude&#x27;</span>: [-<span class="number">118.2437</span>, -<span class="number">74.0060</span>, -<span class="number">87.6298</span>],</span><br><span class="line">            <span class="string">&#x27;City&#x27;</span>: [<span class="string">&#x27;Los Angeles&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Chicago&#x27;</span>]&#125;</span><br><span class="line">    fig = px.scatter_geo(data, lat=<span class="string">&#x27;Latitude&#x27;</span>, lon=<span class="string">&#x27;Longitude&#x27;</span>, text=<span class="string">&#x27;City&#x27;</span>, title=<span class="string">&#x27;Scatter Map Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_scatter_map.png" title="plotly_scatter_map" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="sunburst-chart">Sunburst chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sunburst_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sunburst charts visualize hierarchical data with a circular layout.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Labels&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], <span class="string">&#x27;Parents&#x27;</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>], <span class="string">&#x27;Values&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;</span><br><span class="line">    fig = px.sunburst(data</span><br><span class="line">                      , path=[<span class="string">&#x27;Parents&#x27;</span>, <span class="string">&#x27;Labels&#x27;</span>], values=<span class="string">&#x27;Values&#x27;</span>, title=<span class="string">&#x27;Sunburst Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_sunburst_chart.png" title="plotly_sunburst_chart" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="treemap-chart">Treemap Chart</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">treemap_chart</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Treemaps display hierarchical data as nested rectangles, with size and color indicating values.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Labels&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], <span class="string">&#x27;Parents&#x27;</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>], <span class="string">&#x27;Values&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;</span><br><span class="line">    fig = px.treemap(data, path=[<span class="string">&#x27;Parents&#x27;</span>, <span class="string">&#x27;Labels&#x27;</span>], values=<span class="string">&#x27;Values&#x27;</span>, title=<span class="string">&#x27;Treemap Chart Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_treemap_chart.png" title="plotly_treemap_chart" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr><p id ="parallel-coordinates-plot">Parallel Coordinates Plot</p><a href="#Chart-Types" style="float: right; margin-left: 10px;">Go to >> Chart Types list</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parallel_coordinates_plot</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parallel coordinates plots are used to visualize multivariate data by plotting variables on parallel axes.&quot;&quot;&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;Feature1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;Feature2&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="string">&#x27;Feature3&#x27;</span>: [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]&#125;</span><br><span class="line">    fig = px.parallel_coordinates(data, color=<span class="string">&#x27;Feature1&#x27;</span>, title=<span class="string">&#x27;Parallel Coordinates Plot Example&#x27;</span>)</span><br><span class="line">    fig.show()</span><br></pre></td></tr></table></figure><img src="/hexo-blog/images/plotly_parallel_coordinates_plot.png" title="plotly_parallel_coordinates_plot" style="width: 40%; max-width: 1300px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Plotly is a powerful Python library fo</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="plotly" scheme="https://ooge0.github.io/hexo-blog/tags/plotly/"/>
    
    <category term="data_visualization" scheme="https://ooge0.github.io/hexo-blog/tags/data-visualization/"/>
    
  </entry>
  
  <entry>
    <title>Basics of Generative Pre-training Transformer (GPT)</title>
    <link href="https://ooge0.github.io/hexo-blog/ai_gpt/gpt_basics/"/>
    <id>https://ooge0.github.io/hexo-blog/ai_gpt/gpt_basics/</id>
    <published>2024-12-23T19:43:35.000Z</published>
    <updated>2024-12-24T13:46:09.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Generative Pre-training Transformers (GPT) are a type of language model that utilizes the transformer architecture to generate, predict, or understand natural language. The foundation of GPT is rooted in deep learning principles, leveraging pre-trained models that learn from massive datasets to predict the next word or phrase in a sequence. This guide provides an overview of GPT, its evaluation metrics, and references for further exploration.</p><h2 id="Core-Concepts-of-GPT"><a href="#Core-Concepts-of-GPT" class="headerlink" title="Core Concepts of GPT"></a>Core Concepts of GPT</h2><h3 id="Transformer-Architecture"><a href="#Transformer-Architecture" class="headerlink" title="Transformer Architecture"></a>Transformer Architecture</h3><p>Transformers are neural networks designed to handle sequential data efficiently by using attention mechanisms instead of recurrence. Key components of transformers include:</p><ul><li><strong>Self-Attention Mechanism</strong>: Helps the model focus on relevant parts of input sequences while processing text.</li><li><strong>Feed-Forward Neural Networks</strong>: Adds depth to the architecture, enhancing its expressive capabilities.</li><li><strong>Positional Encoding</strong>: Captures the order of words, a critical aspect of language understanding.</li></ul><h3 id="Generative-Pre-training"><a href="#Generative-Pre-training" class="headerlink" title="Generative Pre-training"></a>Generative Pre-training</h3><p>The pre-training phase involves unsupervised learning on vast corpora of text. The model learns statistical patterns of language, such as grammar, semantics, and relationships between words, enabling fine-tuning for specific tasks.</p><h3 id="Fine-Tuning"><a href="#Fine-Tuning" class="headerlink" title="Fine-Tuning"></a>Fine-Tuning</h3><p>Fine-tuning adapts the pre-trained model to specific applications (e.g., summarization, translation, or question answering) using task-specific labeled datasets.</p><h2 id="Metrics-for-Evaluating-Generated-Context"><a href="#Metrics-for-Evaluating-Generated-Context" class="headerlink" title="Metrics for Evaluating Generated Context"></a>Metrics for Evaluating Generated Context</h2><p>Assessing the quality of generated content requires diverse evaluation metrics. Below are commonly used metrics with short descriptions:</p><ol><li><strong>Perplexity</strong><ul><li>Measures how well a model predicts a sample. Lower perplexity indicates better performance.</li></ul></li><li><strong>BLEU (Bilingual Evaluation Understudy)</strong><ul><li>Evaluates machine translation by comparing generated text to reference translations using n-gram overlap.</li></ul></li><li><strong>ROUGE (Recall-Oriented Understudy for Gisting Evaluation)</strong><ul><li>Measures the quality of summaries by comparing overlap with reference summaries.</li></ul></li><li><strong>METEOR (Metric for Evaluation of Translation with Explicit ORdering)</strong><ul><li>Focuses on precision and recall, considering synonyms and stemming.</li></ul></li><li><strong>CIDEr (Consensus-based Image Description Evaluation)</strong><ul><li>Evaluates the alignment between generated captions and reference captions in visual tasks.</li></ul></li><li><strong>SPICE (Semantic Propositional Image Caption Evaluation)</strong><ul><li>Measures semantic quality by assessing propositional content.</li></ul></li><li><strong>TER (Translation Edit Rate)</strong><ul><li>Computes the number of edits required to match a generated sentence with a reference.</li></ul></li><li><strong>Coherence</strong><ul><li>Checks the logical flow and relevance of ideas in the generated content.</li></ul></li><li><strong>Diversity</strong><ul><li>Assesses variability in generated responses, penalizing repetitive outputs.</li></ul></li><li><strong>AUT (Alternative Usage Tests)</strong><ul><li>Evaluates the applicability of generated content for alternative scenarios or contexts.</li></ul></li></ol><h2 id="Alternative-Usage-Tests-AUT"><a href="#Alternative-Usage-Tests-AUT" class="headerlink" title="Alternative Usage Tests (AUT)"></a>Alternative Usage Tests (AUT)</h2><p>AUT focuses on testing a model’s adaptability in diverse contexts. Examples include:</p><ul><li><strong>Scenario-Specific Adaptation</strong>: Generating content for specific domains, like legal or medical.</li><li><strong>Interactive Dialogues</strong>: Testing conversational models’ ability to handle varied inputs.</li><li><strong>Creative Writing Tasks</strong>: Evaluating the model’s ability to generate poetry, stories, or advertisements.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cs.bu.edu/fac/snyder/cs505/PerplexityPosts.pdf">Read post <code>Two minutes NLP — Perplexity explained with simple probabilities</code> + <code> Perplexity Intuition (and its derivation)</code> on cs.bu.edu</a></li><li><a href="https://medium.com/@echen/understanding-perplexity-metrics-in-natural-language-ai-dbc6d57eb812">Read post <code>Understanding Perplexity Metrics in Natural Language AI</code> on medium.com</a></li><li><a href="https://medium.com/@shubhamsd100/understanding-perplexity-in-language-models-a-detailed-exploration-2108b6ab85af">Read post <code>Understanding Perplexity in Language Models: A Detailed Exploration</code> on medium.com</a></li><li><a href="https://aclanthology.org/P02-1040.pdf">Read paper <code>BLEU: A Method for Automatic Evaluation of Machine Translation. 2002</code> on aclanthology.org</a></li><li><a href="https://towardsdatascience.com/introduction-to-text-summarization-with-rouge-scores-84140c64b471">Read post <code>Introduction to Text Summarization with ROUGE Scores</code> on towardsdatascience.com</a></li><li><a href="https://docs.kolena.com/metrics/meteor/">Read post <code>METEOR</code> on docs.kolena.com</a></li><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Vedantam_CIDEr_Consensus-Based_Image_2015_CVPR_paper.pdf">Read paper <code>CIDEr: Consensus-based Image Description Evaluation</code>. Vedantam et al. (2015) on openaccess.thecvf.com</a></li><li><a href="https://panderson.me/images/SPICE.pdf">Read paper <code>SPICE Metric for Captioning</code> on panderson.me</a></li><li><a href="https://arxiv.org/pdf/2309.12619">Read paper <code>Coherence in natural language: Data structures and applications</code>. Florian Wolf (2000) on</a></li><li><a href="hhttps://arxiv.org/pdf/2309.12619">Read paper <code>Learning to Diversify Neural Text Generation via Degenerative Model.2023</code> on arxiv.org</a></li><li><a href="https://aclanthology.org/D19-1321.pdf">Read paper <code>Long and Diverse Text Generation with Planning-based Hierarchical Variational Model. 2019</code> on aclanthology.org</a></li><li><a href="https://arxiv.org/pdf/1804.11258">Read paper <code>Toward Diverse Text Generation with Inverse Reinforcement Learning. 2018</code> on arxiv.org&#x2F;pdf</a></li><li><a href="https://computationalcreativity.net/iccc23/papers/ICCC-2023_paper_90.pdf">Read post <code>Pushing GPT&#39;s Creativity to Its Limits: Alternative Uses and Torrance Tests. 2023</code> on computationalcreativity.net</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Generative Pre-training Transformers (</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="AI" scheme="https://ooge0.github.io/hexo-blog/tags/AI/"/>
    
    <category term="GPT" scheme="https://ooge0.github.io/hexo-blog/tags/GPT/"/>
    
  </entry>
  
  <entry>
    <title>Magnetic fields</title>
    <link href="https://ooge0.github.io/hexo-blog/other/magnetic_fields/"/>
    <id>https://ooge0.github.io/hexo-blog/other/magnetic_fields/</id>
    <published>2024-12-23T19:43:35.000Z</published>
    <updated>2025-01-05T16:29:49.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>Biological Effects of Magnetic Storms and ELF Magnetic Fields.Ruslan M Sarimov, Dmitry A Serov, Sergey V Gudkov<br>Affiliations<ul><li>DOI: 10.3390&#x2F;biology12121506</li><li><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10740910/">Read paper <code>Biological Effects of Magnetic Storms and ELF Magnetic Fields.Ruslan M Sarimov, Dmitry A Serov, Sergey V Gudkov. 2023</code> on pubmed</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;Biological Effects of Magnetic S</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="other" scheme="https://ooge0.github.io/hexo-blog/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>References for learning AI algorithms</title>
    <link href="https://ooge0.github.io/hexo-blog/ai_algorithms/references_for_learning_ai_algorithms/"/>
    <id>https://ooge0.github.io/hexo-blog/ai_algorithms/references_for_learning_ai_algorithms/</id>
    <published>2024-12-23T16:00:33.000Z</published>
    <updated>2024-12-27T17:14:14.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>references_for_learning_ai_algorithms<br><em>This post related to :</em></p><ol><li><a href="/hexo-blog/ai_algorithms/list_of_top_100_ai_algorithms">AI algorithms. List of top 100 AI algorithms</a></li></ol><hr><h2 id="wall-OpenCV-Image-Matching"><a href="#wall-OpenCV-Image-Matching" class="headerlink" title="wall (OpenCV &#x2F; Image Matching)"></a>wall (OpenCV &#x2F; Image Matching)</h2><ol><li><a href="https://www.geeksforgeeks.org/what-is-the-difference-between-sift-and-surf/">https://www.geeksforgeeks.org/what-is-the-difference-between-sift-and-surf/</a></li><li><a href="https://arxiv.org/pdf/1710.02726">https://arxiv.org/pdf/1710.02726</a></li><li><a href="https://www.robots.ox.ac.uk/~az/icvss08_az_bow.pdf">https://www.robots.ox.ac.uk/~az/icvss08_az_bow.pdf</a></li><li><a href="https://www.grdjournals.com/uploads/article/GRDJE/V02/I04/0013/GRDJEV02I040013.pdf">https://www.grdjournals.com/uploads/article/GRDJE/V02/I04/0013/GRDJEV02I040013.pdf</a></li><li><a href="https://medium.com/@deepanshut041/introduction-to-sift-scale-invariant-feature-transform-65d7f3a72d40">https://medium.com/@deepanshut041/introduction-to-sift-scale-invariant-feature-transform-65d7f3a72d40</a></li><li><a href="https://medium.com/@deepanshut041/introduction-to-surf-speeded-up-robust-features-c7396d6e7c4e">https://medium.com/@deepanshut041/introduction-to-surf-speeded-up-robust-features-c7396d6e7c4e</a></li><li><a href="https://mikhail-kennerley.medium.com/a-comparison-of-sift-surf-and-orb-on-opencv-59119b9ec3d0">https://mikhail-kennerley.medium.com/a-comparison-of-sift-surf-and-orb-on-opencv-59119b9ec3d0</a></li><li><a href="https://machinelearningmastery.com/opencv_sift_surf_orb_keypoints/">https://machinelearningmastery.com/opencv_sift_surf_orb_keypoints/</a></li><li><a href="https://docs.opencv.org/3.4/df/dd2/tutorial_py_surf_intro.html">https://docs.opencv.org/3.4/df/dd2/tutorial_py_surf_intro.html</a></li><li><a href="https://docs.opencv.org/3.4/d7/d66/tutorial_feature_detection.html">https://docs.opencv.org/3.4/d7/d66/tutorial_feature_detection.html</a></li><li><a href="https://github.com/sharmaroshan/Feature-Matching-Using-SIFT-and-SURF/blob/master/sift.ipynb">https://github.com/sharmaroshan/Feature-Matching-Using-SIFT-and-SURF/blob/master/sift.ipynb</a></li><li><a href="https://stackoverflow.com/questions/48220817/how-to-match-and-align-two-images-using-surf-features-python-opencv">https://stackoverflow.com/questions/48220817/how-to-match-and-align-two-images-using-surf-features-python-opencv</a></li><li><a href="https://forum.image.sc/t/align-two-versions-of-the-same-image-that-are-at-different-resolutions-and-one-is-cropped/54737/5">https://forum.image.sc/t/align-two-versions-of-the-same-image-that-are-at-different-resolutions-and-one-is-cropped/54737/5</a></li><li><a href="https://stackoverflow.com/questions/69498429/how-do-i-compute-similarity-of-two-images-using-sift-evaluate-sift-results">https://stackoverflow.com/questions/69498429/how-do-i-compute-similarity-of-two-images-using-sift-evaluate-sift-results</a></li><li><a href="https://www.mathworks.com/matlabcentral/answers/833893-surf-and-sift-feature-extraction">https://www.mathworks.com/matlabcentral/answers/833893-surf-and-sift-feature-extraction</a></li></ol><hr><h2 id="angle-perspective-OpenCV-Image-Matching"><a href="#angle-perspective-OpenCV-Image-Matching" class="headerlink" title="angle + perspective (OpenCV &#x2F; Image Matching)"></a>angle + perspective (OpenCV &#x2F; Image Matching)</h2><ol><li><a href="https://stackoverflow.com/questions/37828981/feature-points-matching-using-sift-between-two-images">https://stackoverflow.com/questions/37828981/feature-points-matching-using-sift-between-two-images</a></li><li><a href="https://stackoverflow.com/questions/40843794/how-to-match-images-taken-at-different-angles">https://stackoverflow.com/questions/40843794/how-to-match-images-taken-at-different-angles</a></li><li><a href="https://iopscience.iop.org/article/10.1088/1757-899X/725/1/012138/pdf">https://iopscience.iop.org/article/10.1088/1757-899X/725/1/012138/pdf</a></li><li><a href="https://www.ripublication.com/ijeer16/ijeerv8n1_01.pdf">https://www.ripublication.com/ijeer16/ijeerv8n1_01.pdf</a></li></ol><hr><h2 id="CNN-OpenCV-Image-Matching"><a href="#CNN-OpenCV-Image-Matching" class="headerlink" title="CNN (OpenCV &#x2F; Image Matching)"></a>CNN (OpenCV &#x2F; Image Matching)</h2><ol><li><a href="https://www.researchgate.net/publication/377933943_A_study_on_the_CNN-based_face_recognition_across_various_facial_angles">https://www.researchgate.net/publication/377933943_A_study_on_the_CNN-based_face_recognition_across_various_facial_angles</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;references_for_learning_ai_algorithms&lt;</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="ML" scheme="https://ooge0.github.io/hexo-blog/tags/ML/"/>
    
    <category term="algorithms" scheme="https://ooge0.github.io/hexo-blog/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>AI algorithms. List of top 100 AI algorithms</title>
    <link href="https://ooge0.github.io/hexo-blog/ai_algorithms/list_of_top_100_ai_algorithms/"/>
    <id>https://ooge0.github.io/hexo-blog/ai_algorithms/list_of_top_100_ai_algorithms/</id>
    <published>2024-12-23T16:00:33.000Z</published>
    <updated>2024-12-24T09:19:04.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>This post related to :</em></p><ol><li><a href="/hexo-blog/ai_algorithms/references_for_learning_ai_algorithms">References for learning AI algorithms</a></li></ol><h2 id="List-of-top-100-AI-algorithms"><a href="#List-of-top-100-AI-algorithms" class="headerlink" title="List of top 100 AI algorithms"></a>List of top 100 AI algorithms</h2><p>Below is a list of AI algorithms discovered in the LinkedIn post.<br>All algorithms presented on the picture below.<br>   <img src="/hexo-blog/images/denis_panjuta_list_of_ai_algorithms.png" alt="denis-panjuta. Algorithms. List of top 100 algorithms" title="@denis-panjuta. Algorithms. List of top 100 algorithms" style="width: 20%; max-width: 1000px; border: 1px solid #ccc; padding: 5px; border-radius: 8px;" /></p><hr><h2 id="Retrived-data-from-the-picture"><a href="#Retrived-data-from-the-picture" class="headerlink" title="Retrived data from the picture:"></a>Retrived data from the picture:</h2><p><strong>Machine Learning Algorithms (14 algorithms)</strong></p><ol><li>Linear Regression</li><li>Logistic Regression</li><li>Decision Trees</li><li>Random Forests</li><li>Support Vector Machines (SVM)</li><li>Naive Bayes</li><li>K-Nearest Neighbors (KNN)</li><li>K-Means Clustering</li><li>Principal Component Analysis (PCA)</li><li>Gradient Boosting Machines (GBM)</li><li>Adaboost</li><li>Bagging</li><li>Stochastic Gradient Descent (SGD)</li><li>Expectation Maximization (EM)</li></ol><hr><p><strong>Natural Language Processing Algorithms (12 algorithms)</strong></p><ol><li>Bag of Words (BoW)</li><li>Term Frequency–Inverse Document Frequency (TF-IDF)</li><li>Word2Vec</li><li>GloVe (Global Vectors for Word Representation)</li><li>Embeddings from Language Models (ELMo)</li><li>GPT (Generative Pre-trained Transformer)</li><li>Seq2Seq Models</li><li>Conditional Random Fields (CRF)</li><li>BERT (Bidirectional Encoder Representations from Transformers)</li><li>RoBERTa</li><li>T5 (Text-to-Text Transformer)</li><li>XLNet</li></ol><p><strong>Computer Vision Algorithms (13 algorithms)</strong></p><ol><li>Edge Detection (Sobel, Prewitt, Canny)</li><li>Hough Transform</li><li>Scale-Invariant Feature Transform (SIFT)</li><li>Histogram of Oriented Gradients (HOG)</li><li>Region-Based Convolutional Neural Network (R-CNN)</li><li>Fast R-CNN</li><li>Mask R-CNN</li><li>You Only Look Once (YOLO)</li><li>SSD (Single Shot Multibox Detector)</li><li>ResNet</li><li>Fully Convolutional Networks (FCN)</li><li>GAN Variants (Pix2Pix, CycleGAN)</li><li>Optical Flow</li></ol><p><strong>Reinforcement Learning Algorithms (13 algorithms)</strong></p><ol><li>Q-Learning</li><li>Deep Q Network (DQN)</li><li>Policy Gradients</li><li>Actor-Critic Methods</li><li>Monte Carlo Tree Search (MCTS)</li><li>Proximal Policy Optimization (PPO)</li><li>Soft Actor-Critic (SAC)</li><li>Trust Region Policy Optimization (TRPO)</li><li>SARSA (State-Action-Reward-State-Action)</li><li>Double DQN</li><li>Dueling DQN</li><li>Rainbow DQN</li><li>TD-Lambda</li></ol><p><strong>Deep Learning Algorithms (14 algorithms)</strong></p><ol><li>Convolutional Neural Networks (CNNs)</li><li>Recurrent Neural Networks (RNNs)</li><li>Long Short-Term Memory (LSTMs)</li><li>Generative Adversarial Networks (GANs)</li><li>Autoencoders</li><li>Deep Belief Networks (DBNs)</li><li>Transformers</li><li>U-Net</li><li>ResNet</li><li>VGGNet</li><li>InceptionNet</li><li>DenseNet</li><li>MobileNet</li><li>EfficientNet</li></ol><p><strong>Optimization Algorithms (14 algorithms)</strong></p><ol><li>Gradient Descent</li><li>Stochastic Gradient Descent (SGD)</li><li>Momentum-Based Methods</li><li>Adam (Adaptive Moment Estimation)</li><li>RMSprop</li><li>Simulated Annealing</li><li>Genetic Algorithm</li><li>Particle Swarm Optimization (PSO)</li><li>Ant Colony Optimization (ACO)</li><li>Bayesian Optimization</li><li>Nelder–Mead</li><li>Powell’s Method</li><li>L-BFGS (Limited-memory BFGS)</li><li>CMA-ES (Covariance Matrix Adaptation Evolution Strategy)</li></ol><p><strong>Ensemble Algorithms (12 algorithms)</strong></p><ol><li>Boosting</li><li>Bagging</li><li>Random Subspace</li><li>Stacking</li><li>Gradient Boosting Machines (GBM)</li><li>XGBoost</li><li>CatBoost</li><li>LightGBM</li><li>Rotation Forest</li><li>Voting Classifier</li><li>SMOTEBoost</li><li>Balanced Random Forest (BRF)</li></ol><p><strong>Recommendation Systems (10 algorithms)</strong></p><ol><li>Collaborative Filtering</li><li>Content-Based Filtering</li><li>Matrix Factorization Techniques (SVD, ALS)</li><li>Association Rule Learning (Apriori, Eclat)</li><li>Neural Collaborative Filtering</li><li>Hybrid Recommendation Systems</li><li>Context-Aware Recommendation</li><li>Reinforcement Learning-Based Recommendation</li><li>Deep Learning-Based Recommendation</li><li>Knowledge Graph-Based Recommendation</li></ol><p><strong>Anomaly Detection Algorithms (9 algorithms)</strong></p><ol><li>Isolation Forest</li><li>One-Class SVM</li><li>Local Outlier Factor (LOF)</li><li>Elliptic Envelope</li><li>DBSCAN</li><li>PCA-Based Anomaly Detection</li><li>Autoencoders-Based Anomaly Detection</li><li>GMM (Gaussian Mixture Model)</li><li>Hawkins–Cramer Test</li><li>Graph Algorithms in AI (8 algorithms)**</li><li>PageRank</li><li>Graph Convolutional Networks (GCNs)</li><li>Node2Vec</li><li>Graph Attention Networks (GAT)</li><li>GraphSAGE</li><li>Random Walk Algorithms</li><li>Label Propagation Algorithm</li><li>Eigenvector-Based Centrality</li></ol><hr><p>Table below is showing some algorithms, related information and examples that programmatically shows how it works (this task is in progress and some separated posts will be created later).</p><table><thead><tr><th><strong>Category</strong></th><th><strong>Algorithm</strong></th><th><strong>References</strong></th><th><strong>Examples</strong></th></tr></thead><tbody><tr><td><strong>Machine Learning Algorithms</strong></td><td>Linear Regression</td><td><a href="https://doi.org/10.1007/978-0-387-84858-7">Algorithm <code>Linear Regression</code> in <code>The Elements of Statistical Learning, Hastie et al., 2009, see on pages 43-50.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_linear_regression">Example in python code for <code>Linear Regression</code></a></td></tr><tr><td></td><td>Logistic Regression</td><td><a href="https://github.com/peteflorence/MachineLearning6.867/blob/master/Bishop/Bishop%20-%20Pattern%20Recognition%20and%20Machine%20Learning.pdf">Algorithm <code>Logistic Regression</code> in <code>Pattern Recognition and Machine Learning, Bishop, 2006, see on pages 205-210.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_logistic_regression">Example in python code for <code>Logistic Regression</code></a></td></tr><tr><td></td><td>Decision Trees</td><td><a href="https://www.taylorfrancis.com/books/mono/10.1201/9781315139470/classification-regression-trees-leo-breiman-jerome-friedman-olshen-charles-stone">Algorithm <code>Decision Trees</code> in <code>Classification and Regression Trees, Breiman et al., 1984, see on pages 32-38.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_decision_trees">Example in python code for <code>Decision Trees</code></a></td></tr><tr><td></td><td>Random Forests</td><td><a href="https://doi.org/10.1007/978-0-387-84858-7">Algorithm <code>Random Forests</code> in <code>The Elements of Statistical Learning, Hastie et al., 2009, see on pages 587-606.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_random_forests">Example in python code for <code>Random Forests</code></a></td></tr><tr><td></td><td>Support Vector Machines</td><td><a href="https://github.com/peteflorence/MachineLearning6.867/blob/master/Bishop/Bishop%20-%20Pattern%20Recognition%20and%20Machine%20Learning.pdf">Algorithm <code>SVM</code> in <code>Pattern Recognition and Machine Learning, Bishop, 2006, see on pages 326-337.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_svm">Example in python code for <code>Support Vector Machines</code></a></td></tr><tr><td><strong>Deep Learning Algorithms</strong></td><td>Convolutional Neural Networks (CNNs)</td><td><a href="http://alvarestech.com/temp/deep/Deep%20Learning%20by%20Ian%20Goodfellow,%20Yoshua%20Bengio,%20Aaron%20Courville%20(z-lib.org).pdf">Algorithm <code>CNNs</code> in <code>Deep Learning, Goodfellow et al., 2016, see on pages 330-378.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_cnns">Example in python code for <code>CNNs</code></a></td></tr><tr><td></td><td>Recurrent Neural Networks (RNNs)</td><td><a href="http://alvarestech.com/temp/deep/Deep%20Learning%20by%20Ian%20Goodfellow,%20Yoshua%20Bengio,%20Aaron%20Courville%20(z-lib.org).pdf">Algorithm <code>RNNs</code> in <code>Deep Learning, Goodfellow et al., 2016, see on pages 372-400.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_rnns">Example in python code for <code>RNNs</code></a></td></tr><tr><td></td><td>Generative Adversarial Networks (GANs)</td><td><a href="http://alvarestech.com/temp/deep/Deep%20Learning%20by%20Ian%20Goodfellow,%20Yoshua%20Bengio,%20Aaron%20Courville%20(z-lib.org).pdf">Algorithm <code>GANs</code> in <code>Deep Learning, Goodfellow et al., 2016, see on pages 669-708.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_gans">Example in python code for <code>GANs</code></a></td></tr><tr><td></td><td>Transformers</td><td><a href="https://arxiv.org/abs/1706.03762">Algorithm <code>Transformers</code> in <code>Attention Is All You Need, Vaswani et al., 2017.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_transformers">Example in python code for <code>Transformers</code></a></td></tr><tr><td><strong>Optimization Algorithms</strong></td><td>Gradient Descent</td><td><a href="https://web.stanford.edu/~boyd/cvxbook/">Algorithm <code>Gradient Descent</code> in <code>Convex Optimization, Boyd et al., 2004, see on pages 232-240.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_gradient_descent">Example in python code for <code>Gradient Descent</code></a></td></tr><tr><td></td><td>Stochastic Gradient Descent (SGD)</td><td><a href="http://alvarestech.com/temp/deep/Deep%20Learning%20by%20Ian%20Goodfellow,%20Yoshua%20Bengio,%20Aaron%20Courville%20(z-lib.org).pdf">Algorithm <code>SGD</code> in <code>Deep Learning, Goodfellow et al., 2016, see on pages 295-298.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_sgd">Example in python code for <code>SGD</code></a></td></tr><tr><td><strong>Reinforcement Learning</strong></td><td>Q-Learning</td><td><a href="https://web.stanford.edu/class/psych209/">Algorithm <code>Q-Learning</code> in <code>Reinforcement Learning: An Introduction, Sutton &amp; Barto, 1998, see on pages 131-139.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_q_learning">Example in python code for <code>Q-Learning</code></a></td></tr><tr><td></td><td>Deep Q-Network (DQN)</td><td><a href="https://arxiv.org/abs/1312.5602">Algorithm <code>DQN</code> in <code>Playing Atari with Deep Reinforcement Learning, Mnih et al., 2013.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_dqn">Example in python code for <code>DQN</code></a></td></tr><tr><td><strong>Natural Language Processing</strong></td><td>BERT (Bidirectional Encoder Representations from Transformers)</td><td><a href="https://arxiv.org/abs/1810.04805">Algorithm <code>BERT</code> in <code>BERT: Pre-training of Deep Bidirectional Transformers, Devlin et al., 2019.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_bert">Example in python code for <code>BERT</code></a></td></tr><tr><td></td><td>GPT (Generative Pre-trained Transformer)</td><td><a href="https://cdn.openai.com/research-covers/language-unsupervised/language_understanding_paper.pdf">Algorithm <code>GPT</code> in <code>Improving Language Understanding by Generative Pre-Training, Radford et al., 2018.</code></a></td><td><a href="/hexo-blog/algorithms/example_in_code_for_gpt">Example in python code for <code>GPT</code></a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;This post related to :&lt;/em&gt;&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="ML" scheme="https://ooge0.github.io/hexo-blog/tags/ML/"/>
    
    <category term="algorithms" scheme="https://ooge0.github.io/hexo-blog/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Knowledge Graph</title>
    <link href="https://ooge0.github.io/hexo-blog/ai_nlp/knowledge_graph/"/>
    <id>https://ooge0.github.io/hexo-blog/ai_nlp/knowledge_graph/</id>
    <published>2024-12-22T09:21:11.000Z</published>
    <updated>2024-12-23T18:40:36.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><a href="https://sysblok.ru/glossary/knowledge-graph-ili-graf-znanij-chto-jeto-takoe-i-gde-primenjaetsja/">Read ‘Knowledge Graph или граф знаний: что это такое и где применяется’ on sysblok.ru</a></li><li><a href="https://lod-cloud.net/"><code>Linked Open Data</code> Knowledge Graph on lod-cloud.net</a></li><li><a href="https://webmaestro.com.ua/ru/blog/knowledge-graph/">Read <code>Граф знаний Google: что это такое и как туда попасть</code> on webmaestro.com.ua</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sysblok.ru/glos</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="NLP" scheme="https://ooge0.github.io/hexo-blog/tags/NLP/"/>
    
    <category term="knowledge_graph" scheme="https://ooge0.github.io/hexo-blog/tags/knowledge-graph/"/>
    
  </entry>
  
  <entry>
    <title>Remote access to Ubuntu machine via ssh. Commands.</title>
    <link href="https://ooge0.github.io/hexo-blog/devops/post_devops__remote_access_to_ubuntu_machine_via_ssh_commands/"/>
    <id>https://ooge0.github.io/hexo-blog/devops/post_devops__remote_access_to_ubuntu_machine_via_ssh_commands/</id>
    <published>2024-12-19T08:18:22.000Z</published>
    <updated>2024-12-19T15:26:38.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List:"></a>Task List:</h2><ol><li><p>Check that any SSH services are installed on the remote Linux machine  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>Check for the correct cervice name<br>Run the following command to list all available services related to SSH:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service | grep ssh</span><br></pre></td></tr></table></figure><p> You might see service names like:</p><ul><li>ssh.service</li><li>sshd.service</li><li>openssh-server.service</li></ul></li><li><p>Check that <code>openssh-server</code> is installed  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>Verify the installed <code>openssh-server</code> configuration  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status sshd</span><br></pre></td></tr></table></figure></li><li><p>Check secure SSH access via the configuration file  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li><p>Confirm that <code>openssh-server</code> is running  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start sshd &amp;&amp; <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd</span><br></pre></td></tr></table></figure></li><li><p>Test SSH connection from a remote system  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@&lt;remote_machine_ip&gt;</span><br></pre></td></tr></table></figure></li><li><p>Transfer files using SSH from <code>&lt;local_machine&gt;</code> to <code>&lt;remote_machine&gt;</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /path/to/local/file username@&lt;remote_machine_ip&gt;:/path/to/remote/destination</span><br></pre></td></tr></table></figure></li></ol><h2 id="Additional-Commands"><a href="#Additional-Commands" class="headerlink" title="Additional Commands:"></a>Additional Commands:</h2><ol><li><p>Restart the SSH service after making configuration changes  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure></li><li><p>Check the active SSH sessions on the remote machine  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span> | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>Allow only key-based authentication for SSH connections  </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Change the following:</span></span><br><span class="line"><span class="comment"># PasswordAuthentication no</span></span><br><span class="line"><span class="comment"># PermitRootLogin no</span></span><br></pre></td></tr></table></figure></li><li><p>Monitor SSH access logs  </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tail</span> -f /var/log/auth.log</span><br></pre></td></tr></table></figure></li><li><p>Put the syste to suspend, by <code>power management</code> (alias <code>pm</code>):</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pm-suspend</span><br></pre></td></tr></table></figure></li><li><p>Put the syste to suspend by <code>systemctl</code>:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">suspend</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;Task-List&quot;&gt;&lt;a href=&quot;#Task-List&quot; c</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="ssh" scheme="https://ooge0.github.io/hexo-blog/tags/ssh/"/>
    
    <category term="devops" scheme="https://ooge0.github.io/hexo-blog/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Troubleshooting SSH connection termination after `sshd_config` changes</title>
    <link href="https://ooge0.github.io/hexo-blog/devops/post_devops__troubleshooting_ssh_connection_termination_after_sshd_config_changes/"/>
    <id>https://ooge0.github.io/hexo-blog/devops/post_devops__troubleshooting_ssh_connection_termination_after_sshd_config_changes/</id>
    <published>2024-12-19T08:18:22.000Z</published>
    <updated>2024-12-19T15:28:31.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Steps-to-verify-and-resolve-the-issue"><a href="#Steps-to-verify-and-resolve-the-issue" class="headerlink" title="Steps to verify and resolve the issue:"></a>Steps to verify and resolve the issue:</h2><ol><li><p><strong>Check if SSH server (<code>sshd</code>) is installed</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep openssh-server</span><br></pre></td></tr></table></figure><p>If not installed:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p><strong>Check if the SSH service is active</strong><br>Identify the SSH service and verify its status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status ssh.service</span><br></pre></td></tr></table></figure><p>If not running:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start ssh.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> ssh.service</span><br></pre></td></tr></table></figure><p>If the service name differs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service | grep ssh</span><br></pre></td></tr></table></figure></li><li><p><strong>Validate Changes to <code>sshd_config</code></strong><br>Test for syntax errors in the configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sshd -t</span><br></pre></td></tr></table></figure><p>Correct any errors found in <code>/etc/ssh/sshd_config</code>.</p></li><li><p><strong>Prevent system suspend by disabling suspend mode.</strong><br>Temporarily disable suspend mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target</span><br></pre></td></tr></table></figure><p>To make this change persistent, edit <code>/etc/systemd/logind.conf</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/systemd/logind.conf</span><br></pre></td></tr></table></figure><p>Add or modify the following lines:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HandleLidSwitch</span>=ignore</span><br><span class="line"><span class="attr">HandleSuspendKey</span>=ignore</span><br><span class="line"><span class="attr">HandleLidSwitchDocked</span>=ignore</span><br><span class="line"><span class="attr">IdleAction</span>=ignore</span><br></pre></td></tr></table></figure><p><strong>!!! IMPORTANT</strong><br>&#96;Do not mixed up configuration if you did any manipulations with preventing machine be sleeping when ‘lid’ is closed.’</p><p>Reload the configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudosystemctlrestartsystemd−logindz</span><br></pre></td></tr></table></figure></li><li><p>Confirm SSH Usage</p><p>Check for active SSH sessions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span>∣grepssh</span><br></pre></td></tr></table></figure><p>Verify the SSH port is open:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudonetstat−tuln∣grep:22</span><br></pre></td></tr></table></figure><p>If using a custom port, update firewall rules:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudoufwallow&lt;customport&gt;/tcpsudoufwreload</span><br></pre></td></tr></table></figure></li><li><p>Custom scrtipt for preventing suspend mode from <strong>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system-sleep&#x2F;</strong></p><ol><li><p>Create script fiel<code>ssh_keep_awake.sh</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>Add there script for getting <code>ip</code> of connected via SSH remote machine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># add some sleep delay to manage execution of script. </span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Checking for active SSH sessions...&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the &#x27;w&#x27; command and store the output</span></span><br><span class="line">w_output=$(w -h)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;w command output: <span class="variable">$w_output</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the IP addresses of users logged in via SSH</span></span><br><span class="line">ip=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$w_output</span>&quot;</span> | grep -oP <span class="string">&#x27;(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Detected IP: <span class="variable">$ip</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;No active SSH session detected.&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;User is still logged in from <span class="variable">$ip</span>&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>Check the script location and permissions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ls</span> -l /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure><p>It should show something like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x 1 root root 123 Dec 19 14:00 /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>Grant access to the file</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>For checking active SSH session on remote Linux machine execute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w -h </span><br></pre></td></tr></table></figure><p>Console should show exisintg session for all users.</p></li><li><p>Run and check script execution via</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure><p>  <strong>Expected Output:</strong></p><ul><li>The output should print the raw result of w -h and then show the detected IP address.</li><li>If there is an active SSH session, it should print “User is still logged in from <IP>“.</li><li>If no session is found, it should print “No active SSH session detected.”.</li></ul></li></ol></li><li><p>Custom scrtipt for preventing suspend mode from <strong>&#x2F;etc&#x2F;pm&#x2F;sleep.d&#x2F;</strong></p><ol><li><p>Create script fiel<code>ssh_keep_awake.sh</code> </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /usr/lib/systemd/system-sleep/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>Add there script for getting <code>ip</code> of connected via SSH remote machine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Checking for active SSH sessions...&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the &#x27;w&#x27; command and store the output</span></span><br><span class="line">w_output=$(w -h)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;w command output: <span class="variable">$w_output</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the IP addresses of users logged in via SSH</span></span><br><span class="line">ip=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$w_output</span>&quot;</span> | grep -oP <span class="string">&#x27;(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Detected IP: <span class="variable">$ip</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;No active SSH session detected.&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;User is still logged in from <span class="variable">$ip</span>&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>Check the script location and permissions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ls</span> -l /etc/pm/sleep.d/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure><p>It should show something like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x 1 root root 123 Dec 19 14:00 /etc/pm/sleep.d/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>Grant access to the file</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /etc/pm/sleep.d/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure></li><li><p>For checking active SSH session on remote Linux machine execute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w -h </span><br></pre></td></tr></table></figure><p>Console should show exisintg session for all users.</p></li><li><p>Run and check script execution via</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/pm/sleep.d/ssh_keep_awake.sh</span><br></pre></td></tr></table></figure><p>  <strong>Expected Output:</strong></p><ul><li>The output should print the raw result of w -h and then show the detected IP address.</li><li>If there is an active SSH session, it should print “User is still logged in from <IP>“.</li><li>If no session is found, it should print “No active SSH session detected.”.</li></ul></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;Steps-to-verify-and-resolve-the-i</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="ssh" scheme="https://ooge0.github.io/hexo-blog/tags/ssh/"/>
    
    <category term="devops" scheme="https://ooge0.github.io/hexo-blog/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Psychology. Emotions. Test set-1</title>
    <link href="https://ooge0.github.io/hexo-blog/psy_emotions/emotions_test_set_1/"/>
    <id>https://ooge0.github.io/hexo-blog/psy_emotions/emotions_test_set_1/</id>
    <published>2024-12-18T09:11:11.000Z</published>
    <updated>2025-01-09T11:25:29.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>Assume we are in an environment where ‘bad’ is considered more desirable than ‘good’. For example, in a group of angry people, negative emotions might be seen as more valuable.</em></p><p>In this scenario:</p><p><strong>Tree-1</strong>: &gt; - Assign a value of 10 to ‘bad’. &gt; - Assign values to subsequent emotions (e.g., Anger, Sadness) using a non-linear distribution. </p><p>This means the values should decrease, but not necessarily at a constant rate. For instance, the difference between ‘bad’ (10) and the next level might be larger than the difference between subsequent levels.</p><p><strong>Tree-2</strong>: &gt; - Assign a value of 10 to ‘good’. &gt; - Create a similar tree structure, but this time, values should increase as we move towards more positive emotions, again using a non-linear distribution.”</p><hr><p><strong>Tree-1 (Bad &#x3D; 10, Non-linear Distribution)</strong></p><ul><li><strong>Emotions (10)</strong> <ul><li><strong>Anger (9)</strong> <ul><li><strong>Rage (8)</strong> <ul><li><strong>Fury (7)</strong> </li><li><strong>Hostility (6.5)</strong></li></ul></li><li><strong>Frustration (8)</strong> <ul><li><strong>Irritation (7)</strong> </li><li><strong>Impatience (6.5)</strong></li></ul></li></ul></li><li><strong>Sadness (9)</strong> <ul><li><strong>Grief (8)</strong> <ul><li><strong>Despair (7)</strong> </li><li><strong>Sorrow (6.5)</strong></li></ul></li><li><strong>Depression (8)</strong> <ul><li><strong>Melancholy (7)</strong> </li><li><strong>Loneliness (6.5)</strong></li></ul></li></ul></li><li><strong>Fear (9)</strong> <ul><li><strong>Anxiety (8)</strong> <ul><li><strong>Worry (7)</strong> </li><li><strong>Dread (6.5)</strong></li></ul></li><li><strong>Panic (8)</strong> <ul><li><strong>Terror (7)</strong> </li><li><strong>Phobia (6.5)</strong></li></ul></li></ul></li><li><strong>Disgust (9)</strong> <ul><li><strong>Loathing (8)</strong> <ul><li><strong>Abhorrence (7)</strong> </li><li><strong>Repulsion (6.5)</strong></li></ul></li><li><strong>Contempt (8)</strong> <ul><li><strong>Scorn (7)</strong> </li><li><strong>Disdain (6.5)</strong></li></ul></li></ul></li></ul></li></ul><p><strong>Notes for Tree-1:</strong></p><ul><li><strong>Non-linearity:</strong> The values decrease in a non-linear fashion (e.g., not by equal increments). This reflects the idea that the impact of negative emotions may not be linear.</li><li><strong>“Bad” is Better:</strong> The highest value (10) is assigned to the top-level emotion, and values decrease as we move down the tree, mirroring the assumption that “bad” is more desirable in this environment.</li></ul><p><strong>Tree-2 (Good &#x3D; 10, Non-linear Distribution)</strong></p><ul><li><strong>Emotions (0)</strong> <ul><li><strong>Joy (9)</strong> <ul><li><strong>Happiness (8)</strong> <ul><li><strong>Euphoria (7)</strong> </li><li><strong>Contentment (6.5)</strong></li></ul></li><li><strong>Excitement (8)</strong> <ul><li><strong>Arousal (7)</strong> </li><li><strong>Enthusiasm (6.5)</strong></li></ul></li></ul></li><li><strong>Trust (9)</strong> <ul><li><strong>Confidence (8)</strong> <ul><li><strong>Certainty (7)</strong> </li><li><strong>Assurance (6.5)</strong></li></ul></li><li><strong>Reliance (8)</strong> <ul><li><strong>Dependence (7)</strong> </li><li><strong>Faith (6.5)</strong></li></ul></li></ul></li><li><strong>Surprise (9)</strong> <ul><li><strong>Amazement (8)</strong> <ul><li><strong>Astonishment (7)</strong> </li><li><strong>Awe (6.5)</strong></li></ul></li><li><strong>Shock (8)</strong> <ul><li><strong>Startle (7)</strong> </li><li><strong>Disbelief (6.5)</strong></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;Assume we are in an environment wh</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="emotions" scheme="https://ooge0.github.io/hexo-blog/tags/emotions/"/>
    
    <category term="psy" scheme="https://ooge0.github.io/hexo-blog/tags/psy/"/>
    
  </entry>
  
  <entry>
    <title>Exploring OpenAI models locally without APIs (DRAFT-GUIDE)</title>
    <link href="https://ooge0.github.io/hexo-blog/ai/post_ai_prompt_engineeringing__task_llm_locally/"/>
    <id>https://ooge0.github.io/hexo-blog/ai/post_ai_prompt_engineeringing__task_llm_locally/</id>
    <published>2024-12-16T16:56:12.000Z</published>
    <updated>2024-12-24T09:17:43.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em>This post related to :</em></p><ol><li><a href="/hexo-blog/ai/post_ai_prompt_engineeringing__task_llm_via_api">Interaction with OpenAPI API for prompt engineering tasks(DRAFT-GUIDE)</a></li></ol><hr><p>This guide provides a structured approach to exploring OpenAI models locally, focusing on setting up a local environment and evaluating the performance and behavior of models without relying on external APIs.  </p><h2 id="Key-objectives"><a href="#Key-objectives" class="headerlink" title="Key objectives"></a>Key objectives</h2><ul><li>Set up OpenAI models on a local machine.  </li><li>Explore model behavior using local resources.  </li><li>Refine and test prompts in an offline environment.</li></ul><hr><h2 id="Steps-to-complete-the-task"><a href="#Steps-to-complete-the-task" class="headerlink" title="Steps to complete the task"></a>Steps to complete the task</h2><h3 id="1-Prepare-the-environment"><a href="#1-Prepare-the-environment" class="headerlink" title="1. Prepare the environment"></a>1. <strong>Prepare the environment</strong></h3><p>Install necessary tools and libraries to work with models locally:  </p><pre><code class="bash">pip install torch transformers  </code></pre><p>Ensure your hardware supports GPU acceleration for optimal performance. Install GPU-compatible versions of PyTorch if applicable:  </p><pre><code class="bash">pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118  </code></pre><hr><h3 id="2-Download-and-set-up-models-locally"><a href="#2-Download-and-set-up-models-locally" class="headerlink" title="2. Download and set up models locally"></a>2. <strong>Download and set up models locally</strong></h3><h4 id="a-Download-pre-trained-models"><a href="#a-Download-pre-trained-models" class="headerlink" title="a. Download pre-trained models"></a>a. <strong>Download pre-trained models</strong></h4><p>Use the <code>transformers</code> library by Hugging Face to download and cache pre-trained models:  </p><pre><code class="python">from transformers import AutoModelForCausalLM, AutoTokenizer  def load_model_and_tokenizer(model_name=&quot;gpt2&quot;):      tokenizer = AutoTokenizer.from_pretrained(model_name)      model = AutoModelForCausalLM.from_pretrained(model_name)      return model, tokenizer  model, tokenizer = load_model_and_tokenizer(&quot;gpt2&quot;)  </code></pre><h4 id="b-Ensure-model-compatibility"><a href="#b-Ensure-model-compatibility" class="headerlink" title="b. Ensure model compatibility"></a>b. <strong>Ensure model compatibility</strong></h4><p>Check the system resources and configure model usage (e.g., CPU vs. GPU):  </p><pre><code class="python">import torch  device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)  model = model.to(device)  </code></pre><hr><h3 id="3-Interact-with-the-model"><a href="#3-Interact-with-the-model" class="headerlink" title="3. Interact with the model"></a>3. <strong>Interact with the model</strong></h3><h4 id="a-Generate-responses"><a href="#a-Generate-responses" class="headerlink" title="a. Generate responses"></a>a. <strong>Generate responses</strong></h4><p>Create a function to generate responses from the local model:  </p><pre><code class="python">def generate_response(prompt, model, tokenizer, max_length=50):      inputs = tokenizer.encode(prompt, return_tensors=&quot;pt&quot;).to(model.device)      outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)      return tokenizer.decode(outputs[0], skip_special_tokens=True)  response = generate_response(&quot;What is AI?&quot;, model, tokenizer)  print(response)  </code></pre><hr><h3 id="4-Design-effective-prompts"><a href="#4-Design-effective-prompts" class="headerlink" title="4. Design effective prompts"></a>4. <strong>Design effective prompts</strong></h3><h4 id="a-Structure-prompts-for-clarity"><a href="#a-Structure-prompts-for-clarity" class="headerlink" title="a. Structure prompts for clarity"></a>a. <strong>Structure prompts for clarity</strong></h4><ul><li>Clearly define tasks or roles for the model.  </li><li>Use concise instructions with examples when necessary.</li></ul><p>Example:  </p><pre><code class="python">def structured_prompt(task_description, examples=[]):      prompt = f&quot;Task: &#123;task_description&#125;\n&quot;      for example in examples:          prompt += f&quot;Example: &#123;example&#125;\n&quot;      return prompt  custom_prompt = structured_prompt(&quot;Explain AI&quot;, [&quot;What is artificial intelligence?&quot;, &quot;Define AI applications&quot;])  </code></pre><h4 id="b-Experiment-with-settings"><a href="#b-Experiment-with-settings" class="headerlink" title="b. Experiment with settings"></a>b. <strong>Experiment with settings</strong></h4><p>Tweak parameters like temperature, top-p, and repetition penalty to modify outputs:  </p><pre><code class="python">def generate_with_settings(prompt, model, tokenizer, temperature=0.7):      inputs = tokenizer.encode(prompt, return_tensors=&quot;pt&quot;).to(model.device)      outputs = model.generate(inputs, temperature=temperature, max_length=100, top_p=0.9)      return tokenizer.decode(outputs[0], skip_special_tokens=True)  response = generate_with_settings(custom_prompt, model, tokenizer)  print(response)  </code></pre><hr><h3 id="5-Evaluate-model-performance"><a href="#5-Evaluate-model-performance" class="headerlink" title="5. Evaluate model performance"></a>5. <strong>Evaluate model performance</strong></h3><h4 id="a-Define-metrics"><a href="#a-Define-metrics" class="headerlink" title="a. Define metrics"></a>a. <strong>Define metrics</strong></h4><ul><li><strong>Accuracy</strong>: Evaluate outputs against a known dataset.  </li><li><strong>Relevance</strong>: Rate how well the output aligns with input prompts.</li></ul><h4 id="b-Analyze-outputs"><a href="#b-Analyze-outputs" class="headerlink" title="b. Analyze outputs"></a>b. <strong>Analyze outputs</strong></h4><p>Log inputs and outputs for debugging and analysis:  </p><pre><code class="python">def log_interaction(prompt, response, log_file=&quot;local_logs.txt&quot;):      with open(log_file, &quot;a&quot;) as file:          file.write(f&quot;Prompt: &#123;prompt&#125;\nResponse: &#123;response&#125;\n\n&quot;)  log_interaction(custom_prompt, response)  </code></pre><hr><h3 id="6-Optimize-model-usage"><a href="#6-Optimize-model-usage" class="headerlink" title="6. Optimize model usage"></a>6. <strong>Optimize model usage</strong></h3><h4 id="a-Batch-processing"><a href="#a-Batch-processing" class="headerlink" title="a. Batch processing"></a>a. <strong>Batch processing</strong></h4><p>Process multiple inputs in parallel for efficiency:  </p><pre><code class="python">def batch_generate(prompts, model, tokenizer):      inputs = tokenizer(prompts, return_tensors=&quot;pt&quot;, padding=True, truncation=True).to(model.device)      outputs = model.generate(**inputs, max_length=50)      return [tokenizer.decode(output, skip_special_tokens=True) for output in outputs]  batch_responses = batch_generate([&quot;What is AI?&quot;, &quot;Define machine learning&quot;], model, tokenizer)  print(batch_responses)  </code></pre><h4 id="b-Fine-tuning-for-custom-tasks"><a href="#b-Fine-tuning-for-custom-tasks" class="headerlink" title="b. Fine-tuning for custom tasks"></a>b. <strong>Fine-tuning for custom tasks</strong></h4><p>Download and fine-tune the model with a custom dataset for specific use cases.  </p><hr><h2 id="Tools-and-libraries-overview"><a href="#Tools-and-libraries-overview" class="headerlink" title="Tools and libraries overview"></a>Tools and libraries overview</h2><ul><li><strong>Model handling</strong>: Hugging Face Transformers  </li><li><strong>Performance optimization</strong>: PyTorch with GPU support  </li><li><strong>Data logging</strong>: Python’s <code>logging</code> module</li></ul><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By following these steps, you can explore OpenAI models locally without relying on external APIs. This guide provides a framework for setting up, testing, and optimizing prompts for various tasks using locally hosted models.  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;em&gt;This post related to :&lt;/em&gt;&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="AI" scheme="https://ooge0.github.io/hexo-blog/tags/AI/"/>
    
    <category term="ML" scheme="https://ooge0.github.io/hexo-blog/tags/ML/"/>
    
    <category term="prompt_engineering" scheme="https://ooge0.github.io/hexo-blog/tags/prompt-engineering/"/>
    
    <category term="local_development" scheme="https://ooge0.github.io/hexo-blog/tags/local-development/"/>
    
  </entry>
  
  <entry>
    <title>Windows OS apps</title>
    <link href="https://ooge0.github.io/hexo-blog/2024/12/13/post_os__windows%20app/"/>
    <id>https://ooge0.github.io/hexo-blog/2024/12/13/post_os__windows%20app/</id>
    <published>2024-12-13T07:18:22.000Z</published>
    <updated>2024-12-16T08:25:18.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Monitorian"><a href="#Monitorian" class="headerlink" title="Monitorian"></a>Monitorian</h2><ul><li><strong>Monitorian app description</strong>: Monitorian is a desktop tool to adjust the brightness of multiple monitors with ease. The user can change the brightness of monitors, including external ones, either individually or in unison. In addition, the user can change the adjustable range of brightness and contrast for each monitor seamlessly.</br>To control an external monitor, the monitor must be DDC/CI compatible and the function enabled. If a monitor is connected through an converter, docking station or other device, such a device must be also compatible.<ul><li><a href="https://github.com/emoacht/Monitorian">Monitorian home page</a></li><li><a href="https://apps.microsoft.com/detail/9nw33j738bl0?hl=en-GB&gl=UA">Monitorian Microsoft store download page</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;Monitorian&quot;&gt;&lt;a href=&quot;#Monitorian&quot;</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="apps" scheme="https://ooge0.github.io/hexo-blog/tags/apps/"/>
    
    <category term="windows_os" scheme="https://ooge0.github.io/hexo-blog/tags/windows-os/"/>
    
  </entry>
  
  <entry>
    <title>Text Generation Coherence vs. Text Generation Quality</title>
    <link href="https://ooge0.github.io/hexo-blog/linguistic/text_coherence_vs_text_quiality/"/>
    <id>https://ooge0.github.io/hexo-blog/linguistic/text_coherence_vs_text_quiality/</id>
    <published>2024-12-12T09:21:11.000Z</published>
    <updated>2024-12-23T11:58:22.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="1-Text-Generation-Coherence"><a href="#1-Text-Generation-Coherence" class="headerlink" title="1. Text Generation Coherence"></a>1. Text Generation Coherence</h2><p>Coherence refers to the logical and structural flow of the text. A coherent text feels connected and makes sense as a whole. It ensures that:</p><ul><li><strong>Logical Progression</strong>: Sentences and paragraphs follow each other in a natural order.</li><li><strong>Topic Consistency</strong>: The generated text remains focused on a single theme or idea.</li><li><strong>Contextual Relevance</strong>: Each part of the text relates appropriately to the previous and following parts.</li><li><strong>Absence of Contradictions</strong>: There are no logical inconsistencies or contradictory statements.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><ul><li><p><strong>Coherent Text</strong>:</p><blockquote><p>“The sun was shining brightly in the clear blue sky. Birds chirped as children played in the park. It was a perfect day for a picnic.”</p></blockquote><ul><li>This is coherent because the sentences are connected and describe a single scene.</li></ul></li><li><p><strong>Incoherent Text</strong>:</p><blockquote><p>“The sun was shining. Suddenly, a spaceship landed in the park. Watermelons are tasty.”</p></blockquote><ul><li>This lacks coherence due to abrupt topic shifts and lack of logical flow.</li></ul></li></ul><p><strong>Key Challenge:</strong> Ensuring the generated text flows smoothly across different parts without jumping topics or introducing unrelated ideas.</p><hr><h2 id="2-Text-Generation-Quality"><a href="#2-Text-Generation-Quality" class="headerlink" title="2. Text Generation Quality"></a>2. Text Generation Quality</h2><p>Quality refers to how well the generated text meets overall standards of good writing. It is a broader measure that includes:</p><ul><li><strong>Grammar and Syntax</strong>: Free of grammatical errors and awkward sentence structures.</li><li><strong>Vocabulary Use</strong>: Appropriate word choice, richness of language, and precision.</li><li><strong>Creativity and Style</strong>: Ability to generate text that is engaging, varied, and stylistically appropriate for the context.</li><li><strong>Correctness</strong>: Facts and information presented are accurate.</li><li><strong>Relevance</strong>: Addresses the input or prompt directly and completely.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example:"></a>Example:</h3><ul><li><p><strong>High-Quality Text</strong>:</p><blockquote><p>“Artificial intelligence has revolutionized many industries, offering unparalleled efficiency and innovation. From healthcare to finance, its impact is profound.”</p></blockquote><ul><li>This text is grammatically correct, well-structured, and relevant.</li></ul></li><li><p><strong>Low-Quality Text</strong>:</p><blockquote><p>“Artificial intelligance revolution in industries many, efficiently innovation offering. Healthcare finance profound impact is.”</p></blockquote><ul><li>This text is grammatically incorrect and poorly structured.</li></ul></li></ul><p><strong>Key Challenge:</strong> Balancing creativity, accuracy, and linguistic correctness to produce engaging and relevant content.</p><hr><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><table><thead><tr><th><strong>Aspect</strong></th><th><strong>Text Generation Coherence</strong></th><th><strong>Text Generation Quality</strong></th></tr></thead><tbody><tr><td><strong>Focus</strong></td><td>Logical flow and connection between parts of the text.</td><td>Overall writing standards, including grammar, style, and relevance.</td></tr><tr><td><strong>Scope</strong></td><td>Specific to structural and contextual alignment.</td><td>Broader, encompassing coherence, grammar, creativity, etc.</td></tr><tr><td><strong>Evaluation</strong></td><td>Assesses transitions, logical progression, and focus.</td><td>Evaluates overall effectiveness, correctness, and engagement.</td></tr><tr><td><strong>Common Issues</strong></td><td>Topic shifts, contradictions, lack of context.</td><td>Grammatical errors, awkward phrasing, irrelevance.</td></tr></tbody></table><hr><h2 id="Real-World-Importance"><a href="#Real-World-Importance" class="headerlink" title="Real-World Importance"></a>Real-World Importance</h2><ul><li><strong>Coherence</strong> is critical for tasks requiring deep contextual understanding, such as writing long essays or technical documents.</li><li><strong>Quality</strong> is essential for creating polished and professional output, such as marketing content or customer communications.</li></ul><blockquote><p>While coherence is a subset of quality, high-quality text must always be coherent. However, coherent text might not necessarily be high-quality if it lacks creativity, relevance, or stylistic finesse.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;1-Text-Generation-Coherence&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="NLP" scheme="https://ooge0.github.io/hexo-blog/tags/NLP/"/>
    
    <category term="linguistic" scheme="https://ooge0.github.io/hexo-blog/tags/linguistic/"/>
    
  </entry>
  
  <entry>
    <title>Fine-Tuning vs. Training Models for Specific Tasks</title>
    <link href="https://ooge0.github.io/hexo-blog/2024/12/10/post_ai_ml_basiscs__fune_tuning_vs_training_models_for_specific_tasks/"/>
    <id>https://ooge0.github.io/hexo-blog/2024/12/10/post_ai_ml_basiscs__fune_tuning_vs_training_models_for_specific_tasks/</id>
    <published>2024-12-10T17:30:33.000Z</published>
    <updated>2024-12-10T17:30:22.717Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Fine-tuning and training are two common approaches to adapting machine learning models for specific tasks. While training involves building a model from scratch or pre-trained weights, fine-tuning adapts an already trained model to perform well on a particular task. Below, we explore the nuances of these approaches for various popular architectures, including FFNs, CNNs, LSTMs, and Transformers.</p><hr><h2 id="Key-differences-between-fine-tuning-and-training"><a href="#Key-differences-between-fine-tuning-and-training" class="headerlink" title="Key differences between fine-tuning and training"></a>Key differences between fine-tuning and training</h2><table><thead><tr><th>Aspect</th><th>Fine-Tuning</th><th>Training</th></tr></thead><tbody><tr><td><strong>Starting Point</strong></td><td>Pre-trained model weights from a related task (e.g., ImageNet for vision, GPT for text).</td><td>Randomly initialized weights.</td></tr><tr><td><strong>Data Requirements</strong></td><td>Requires less data; leverages knowledge from the pre-trained model.</td><td>Requires large amounts of labeled data.</td></tr><tr><td><strong>Training Duration</strong></td><td>Generally shorter; only adjusts some layers.</td><td>Longer; all parameters are learned from scratch.</td></tr><tr><td><strong>Resource Needs</strong></td><td>Less compute-intensive due to reduced training scope.</td><td>High resource demands for extensive training.</td></tr><tr><td><strong>Use Case</strong></td><td>When data is limited or computational resources are constrained.</td><td>When custom architecture or large task-specific datasets are available.</td></tr></tbody></table><hr><h2 id="Baselines-for-fine-tuning-training"><a href="#Baselines-for-fine-tuning-training" class="headerlink" title="Baselines for fine-tuning&#x2F;training"></a>Baselines for fine-tuning&#x2F;training</h2><h3 id="1-Feedforward-Networks-FFNs"><a href="#1-Feedforward-Networks-FFNs" class="headerlink" title="1. Feedforward Networks (FFNs)"></a>1. Feedforward Networks (FFNs)</h3><ul><li><strong>Baseline</strong>: Fully connected layers with non-linear activations.</li><li><strong>Fine-Tuning</strong>: Modify output layers to match the target task and optionally freeze earlier layers.</li><li><strong>Training</strong>: Start with random initialization, requiring carefully tuned learning rates and weight initialization methods.</li></ul><h3 id="2-Convolutional-Neural-Networks-CNNs"><a href="#2-Convolutional-Neural-Networks-CNNs" class="headerlink" title="2. Convolutional Neural Networks (CNNs)"></a>2. Convolutional Neural Networks (CNNs)</h3><ul><li><strong>Baseline</strong>: Architectures like VGG, ResNet, or EfficientNet, pre-trained on ImageNet.</li><li><strong>Fine-Tuning</strong>: Replace the classification head to match target classes, often freezing earlier convolutional layers.</li><li><strong>Training</strong>: Train from scratch if the task involves entirely different visual domains (e.g., medical imaging).</li></ul><h3 id="3-Recurrent-Neural-Networks-RNNs-and-Variants-LSTMs-GRUs"><a href="#3-Recurrent-Neural-Networks-RNNs-and-Variants-LSTMs-GRUs" class="headerlink" title="3. Recurrent Neural Networks (RNNs) and Variants (LSTMs, GRUs)"></a>3. Recurrent Neural Networks (RNNs) and Variants (LSTMs, GRUs)</h3><ul><li><strong>Baseline</strong>: Pre-trained word embeddings (e.g., GloVe, Word2Vec) or models like ELMo.</li><li><strong>Fine-Tuning</strong>: Use pre-trained embeddings, fine-tune the LSTM layers on sequential tasks.</li><li><strong>Training</strong>: Train an LSTM network from scratch for language modeling or time-series tasks.</li></ul><h3 id="4-Transformers"><a href="#4-Transformers" class="headerlink" title="4. Transformers"></a>4. Transformers</h3><ul><li><strong>Baseline</strong>: Models like BERT, GPT, or T5.</li><li><strong>Fine-Tuning</strong>: Modify the decoder head, adjust hyperparameters like learning rate and layer freezing.</li><li><strong>Training</strong>: Start with pre-trained embeddings; for unique tasks, initialize the Transformer from scratch (high compute).</li></ul><hr><h2 id="Technical-details-of-popular-architectures"><a href="#Technical-details-of-popular-architectures" class="headerlink" title="Technical details of popular architectures"></a>Technical details of popular architectures</h2><table><thead><tr><th>Model</th><th>Baseline Task</th><th>Fine-Tuning Scope</th><th>Training Considerations</th></tr></thead><tbody><tr><td><strong>VGG16</strong></td><td>Image Classification (ImageNet)</td><td>Replace final dense layer, freeze initial layers.</td><td>High memory usage, simpler architecture to optimize.</td></tr><tr><td><strong>ResNet50</strong></td><td>Image Classification (ImageNet)</td><td>Adjust classification head; fine-tune deeper layers as needed.</td><td>Skip connections improve gradient flow.</td></tr><tr><td><strong>BERT</strong></td><td>Masked Language Model (MLM)</td><td>Modify for classification, QA, or summarization.</td><td>Pre-training requires MLM objectives.</td></tr><tr><td><strong>GPT-3</strong></td><td>Text Generation</td><td>Fine-tune specific tasks by updating decoder head.</td><td>Requires extensive GPU resources for full training.</td></tr><tr><td><strong>LSTM</strong></td><td>Sequential Data Modeling</td><td>Fine-tune on embeddings, adjust for target sequence length.</td><td>Long training times due to sequential processing.</td></tr><tr><td><strong>EfficientNet</strong></td><td>Image Classification</td><td>Replace head; scale input resolution for task-specific datasets.</td><td>Compound scaling optimizes trade-offs in performance.</td></tr></tbody></table><hr><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Fine-tuning and training models depend heavily on the task, available data, and computational resources. Fine-tuning is generally faster and resource-efficient, making it ideal for adapting large pre-trained models to specific tasks. On the other hand, training from scratch offers flexibility when creating custom architectures but demands extensive data and compute. By understanding these approaches, practitioners can select the most suitable method for their applications.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Fine-tuning and training are two commo</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="ML" scheme="https://ooge0.github.io/hexo-blog/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>Comparison of popular models and architectures</title>
    <link href="https://ooge0.github.io/hexo-blog/2024/12/10/post_ai_nn__comparison_of_popular_models_and_architectures/"/>
    <id>https://ooge0.github.io/hexo-blog/2024/12/10/post_ai_nn__comparison_of_popular_models_and_architectures/</id>
    <published>2024-12-10T17:30:33.000Z</published>
    <updated>2024-12-13T07:38:16.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Related to:</p><ul><li><a href="../../../../post_ai_nn__list_of_neural_network_models_architectures_and_basic_components">List of neural network models, architectures, and basic components</a></li></ul><hr><h2 id="Table-Single-models-with-options"><a href="#Table-Single-models-with-options" class="headerlink" title="Table  - Single models with options"></a>Table  - Single models with options</h2><h1 id="Detailed-Breakdown-of-Popular-Models-and-Architectures"><a href="#Detailed-Breakdown-of-Popular-Models-and-Architectures" class="headerlink" title="Detailed Breakdown of Popular Models and Architectures"></a>Detailed Breakdown of Popular Models and Architectures</h1><h2 id="Autoencoders"><a href="#Autoencoders" class="headerlink" title="Autoencoders"></a>Autoencoders</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Encoder, Decoder, Latent Space</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Reconstruction Loss</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Weights (Changeable), Latent Dimensions (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Reconstruction Accuracy</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Latent Dimension Size (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Lower Reconstruction Error</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Effective Latent Space Size, Training Convergence Rate</td></tr></tbody></table><h2 id="CNN-Convolutional-Neural-Networks"><a href="#CNN-Convolutional-Neural-Networks" class="headerlink" title="CNN (Convolutional Neural Networks)"></a>CNN (Convolutional Neural Networks)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Convolution Layers, Pooling, Fully Connected Layers</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Accuracy, Precision, Recall, F1-Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Filter Weights (Changeable), Input Channels (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Detection Accuracy</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Kernel Size, Stride, Number of Filters (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Higher Feature Extraction Quality</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Filter Efficiency, Computational Cost</td></tr></tbody></table><h2 id="RNN-Recurrent-Neural-Networks"><a href="#RNN-Recurrent-Neural-Networks" class="headerlink" title="RNN (Recurrent Neural Networks)"></a>RNN (Recurrent Neural Networks)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Recurrent Layers, Activation Functions</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Perplexity, Accuracy, BLEU Score (NLP)</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Hidden State (Changeable), Sequence Length (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Temporal Pattern Capture Efficiency</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Hidden State Size (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Sequence Learning Performance</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Effective Sequence Memory Size</td></tr></tbody></table><h2 id="LSTM-Long-Short-Term-Memory-Networks"><a href="#LSTM-Long-Short-Term-Memory-Networks" class="headerlink" title="LSTM (Long Short-Term Memory Networks)"></a>LSTM (Long Short-Term Memory Networks)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>LSTM Cells (Input, Forget, Output Gates)</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Perplexity, Accuracy (Time-Series, NLP)</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Cell Weights (Changeable), Memory Cell (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Long-Term Dependency Capture Efficiency</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Number of Layers (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Retention of Long-Term Dependencies</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Sequence Retention and Gradient Stability</td></tr></tbody></table><h2 id="GNN-Graph-Neural-Networks"><a href="#GNN-Graph-Neural-Networks" class="headerlink" title="GNN (Graph Neural Networks)"></a>GNN (Graph Neural Networks)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Node Embeddings, Edge Features, Graph Convolutions</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Node Classification Accuracy, Link Prediction</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Edge Weights (Changeable), Node Attributes (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Graph Feature Capture Efficiency</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Number of Layers, Embedding Size (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Graph-Level Feature Generalization</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Graph Topology Learning</td></tr></tbody></table><h2 id="BERT-Bidirectional-Encoder-Representations-from-Transformers"><a href="#BERT-Bidirectional-Encoder-Representations-from-Transformers" class="headerlink" title="BERT (Bidirectional Encoder Representations from Transformers)"></a>BERT (Bidirectional Encoder Representations from Transformers)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Encoder, Multi-Head Attention, Feedforward Layers</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>F1-Score, Exact Match (QA), Perplexity</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Token Embeddings (Changeable), Vocabulary (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Contextual Understanding Quality</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Batch Size, Sequence Length (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Contextual Embedding Accuracy</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Attention Mechanism, Positional Encoding</td></tr></tbody></table><h2 id="BART-Bidirectional-and-Auto-Regressive-Transformers"><a href="#BART-Bidirectional-and-Auto-Regressive-Transformers" class="headerlink" title="BART (Bidirectional and Auto-Regressive Transformers)"></a>BART (Bidirectional and Auto-Regressive Transformers)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Encoder-Decoder, Multi-Head Attention, Feedforward</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Rouge Score, BLEU Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Attention Weights (Changeable), Vocabulary (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Summarization and Translation Accuracy</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Number of Heads (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Text Generation Quality</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Encoder-Decoder Consistency</td></tr></tbody></table><h2 id="T5-Text-to-Text-Transfer-Transformer"><a href="#T5-Text-to-Text-Transfer-Transformer" class="headerlink" title="T5 (Text-to-Text Transfer Transformer)"></a>T5 (Text-to-Text Transfer Transformer)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Encoder-Decoder, Attention Mechanisms, Feedforward</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Rouge Score, BLEU Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Token Embeddings (Changeable), Vocabulary (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Text-to-Text Conversion Accuracy</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Sequence Length, Beam Width (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Text Generation Coherence</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Attention Span, Latent Representation Quality</td></tr></tbody></table><h2 id="LLAMA"><a href="#LLAMA" class="headerlink" title="LLAMA"></a>LLAMA</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Transformer Layers, Feedforward Layers, Attention</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Restricted for Modifications</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>F1-Score, Rouge Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Attention Weights (Changeable), Vocabulary (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Latent Representation Consistency</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Number of Layers, Head Size (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Layer-to-Layer Weight Propagation</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Transformer Block Efficiency</td></tr></tbody></table><h2 id="GPT-Generative-Pre-trained-Transformer"><a href="#GPT-Generative-Pre-trained-Transformer" class="headerlink" title="GPT (Generative Pre-trained Transformer)"></a>GPT (Generative Pre-trained Transformer)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Transformer Decoder, Feedforward Layers, Attention</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Perplexity, BLEU Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Attention Weights (Changeable), Vocabulary (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Generative Text Coherence</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Learning Rate, Model Depth, Token Limit (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Generative Text Quality</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Token Context Understanding</td></tr></tbody></table><h2 id="ViT-Vision-Transformer"><a href="#ViT-Vision-Transformer" class="headerlink" title="ViT (Vision Transformer)"></a>ViT (Vision Transformer)</h2><table><thead><tr><th><strong>Category</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>Basic Components</strong></td><td>Patch Embedding, Transformer Layers, Attention</td></tr><tr><td><strong>Open-Source&#x2F; Forbidden</strong></td><td>Open-Source</td></tr><tr><td><strong>Criteria of Measuring Productivity</strong></td><td>Accuracy, Precision, Recall, F1-Score</td></tr><tr><td><strong>Model’s Parameters</strong></td><td>Patch Embeddings (Changeable), Image Size (Fixed)</td></tr><tr><td><strong>Criteria of Measuring Parameter’s Productivity</strong></td><td>Visual Feature Generalization</td></tr><tr><td><strong>Model’s Hyperparameters</strong></td><td>Patch Size, Attention Heads (Changeable)</td></tr><tr><td><strong>Criteria of Measuring Hyperparameter’s Productivity</strong></td><td>Patch Extraction Accuracy, Attention Span</td></tr><tr><td><strong>Basic Components of Hyperparameter’s Productivity</strong></td><td>Image Feature Learning Efficiency</td></tr></tbody></table><!-- ## Table - Models vs features| **Model/Architecture** | **Basic Components**                                    | **Open-Source/ Forbidden for Modifications** | **Criteria of Measuring Model Productivity** | **Model's Parameters (Changeable/Non-Changeable)** | **Criteria of Measuring Parameter's Productivity** | **Model's Hyperparameters (Changeable/Non-Changeable)** | **Criteria of Measuring Hyperparameter's Productivity** | **Basic Components of Hyperparameter's Productivity** ||-------------------------|--------------------------------------------------------|-----------------------------------------------|-----------------------------------------------|----------------------------------------------------|----------------------------------------------------|---------------------------------------------------------|---------------------------------------------------------|---------------------------------------------------------|| **Autoencoders**        | Encoder, Decoder, Latent Space                         | Open-Source                                   | Reconstruction Loss                            | Weights (Changeable), Latent Dimensions (Fixed)    | Reconstruction Accuracy                              | Learning Rate, Latent Dimension Size (Changeable)       | Lower Reconstruction Error                             | Effective Latent Space Size, Training Convergence Rate || **CNN**                 | Convolution Layers, Pooling, Fully Connected Layers    | Open-Source                                   | Accuracy, Precision, Recall, F1-Score         | Filter Weights (Changeable), Input Channels (Fixed)| Detection Accuracy                                   | Kernel Size, Stride, Number of Filters (Changeable)     | Higher Feature Extraction Quality                      | Filter Efficiency, Computational Cost                 || **RNN**                 | Recurrent Layers, Activation Functions                | Open-Source                                   | Perplexity, Accuracy, BLEU Score (NLP)        | Hidden State (Changeable), Sequence Length (Fixed) | Temporal Pattern Capture Efficiency                 | Learning Rate, Hidden State Size (Changeable)           | Sequence Learning Performance                          | Effective Sequence Memory Size                        || **FNN**                 | Neurons, Dense Layers, Activation Functions           | Open-Source                                   | Accuracy, Loss Reduction                       | Weights (Changeable), Bias (Fixed)                | Accuracy and Loss Reduction                          | Learning Rate, Number of Layers (Changeable)            | Loss Convergence Rate                                  | Layer Depth, Weight Initialization Strategy           || **LSTM**                | LSTM Cells (Input, Forget, Output Gates)              | Open-Source                                   | Perplexity, Accuracy (Time-Series, NLP)        | Cell Weights (Changeable), Memory Cell (Fixed)    | Long-Term Dependency Capture Efficiency             | Learning Rate, Number of Layers (Changeable)            | Retention of Long-Term Dependencies                   | Sequence Retention and Gradient Stability             || **GNN**                 | Node Embeddings, Edge Features, Graph Convolutions    | Open-Source                                   | Node Classification Accuracy, Link Prediction | Edge Weights (Changeable), Node Attributes (Fixed)| Graph Feature Capture Efficiency                    | Number of Layers, Embedding Size (Changeable)           | Graph-Level Feature Generalization                    | Graph Topology Learning                                || **BERT**                | Encoder, Multi-Head Attention, Feedforward Layers     | Open-Source                                   | F1-Score, Exact Match (QA), Perplexity         | Token Embeddings (Changeable), Vocabulary (Fixed) | Contextual Understanding Quality                    | Learning Rate, Batch Size, Sequence Length (Changeable)| Contextual Embedding Accuracy                         | Attention Mechanism, Positional Encoding              || **BART**                | Encoder-Decoder, Multi-Head Attention, Feedforward    | Open-Source                                   | Rouge Score, BLEU Score                        | Attention Weights (Changeable), Vocabulary (Fixed)| Summarization and Translation Accuracy              | Learning Rate, Number of Heads (Changeable)             | Text Generation Quality                               | Encoder-Decoder Consistency                           || **T5**                  | Encoder-Decoder, Attention Mechanisms, Feedforward    | Open-Source                                   | Rouge Score, BLEU Score                        | Token Embeddings (Changeable), Vocabulary (Fixed) | Text-to-Text Conversion Accuracy                    | Sequence Length, Beam Width (Changeable)                | Text Generation Coherence                             | Attention Span, Latent Representation Quality         || **LLAMA**               | Transformer Layers, Feedforward Layers, Attention     | Restricted for Modifications                  | F1-Score, Rouge Score                          | Attention Weights (Changeable), Vocabulary (Fixed)| Generative Output Accuracy                          | Number of Layers, Head Size (Changeable)                | Latent Representation Consistency                     | Layer-to-Layer Weight Propagation                     || **GPT**                 | Transformer Decoder, Feedforward Layers, Attention    | Open-Source                                   | Perplexity, BLEU Score                         | Attention Weights (Changeable), Vocabulary (Fixed)| Generative Text Coherence                            | Learning Rate, Model Depth, Token Limit (Changeable)    | Generative Text Quality                               | Token Context Understanding                           || **ViT (Vision Transformer)** | Patch Embedding, Transformer Layers, Attention        | Open-Source                                   | Accuracy, Precision, Recall, F1-Score         | Patch Embeddings (Changeable), Image Size (Fixed) | Image Feature Generalization                         | Patch Size, Attention Heads (Changeable)                | Visual Feature Learning Efficiency                    | Patch Extraction Accuracy, Attention Span             |---### Notes:1. **Open-Source vs. Forbidden for Modifications**: Models like LLAMA may have licensing restrictions preventing modification, while others are freely accessible for experimentation.2. **Criteria of Productivity**: Metrics vary by task, e.g., classification accuracy for vision tasks, BLEU scores for translation, or F1-scores for question-answering.3. **Parameters vs. Hyperparameters**: Parameters are learned during training (e.g., weights), whereas hyperparameters are manually set and adjusted (e.g., learning rate, number of layers).4. **Measuring Hyperparameter Productivity**: Includes monitoring loss convergence, validation performance, and computational efficiency.## Table - Features vs models# Comparison of Popular Models and Architectures| **Category**                               | **Autoencoders**                | **CNN**                            | **RNN**                             | **FNN**                             | **LSTM**                            | **GNN**                             | **BERT**                            | **BART**                            | **T5**                              | **LLAMA**                           | **GPT**                             | **ViT**                             ||--------------------------------------------|----------------------------------|-------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|--------------------------------------|| **Basic Components**                       | Encoder, Decoder, Latent Space  | Convolution Layers, Pooling, Fully Connected Layers | Recurrent Layers, Activation Functions | Neurons, Dense Layers, Activation Functions | LSTM Cells (Input, Forget, Output Gates) | Node Embeddings, Edge Features, Graph Convolutions | Encoder, Multi-Head Attention, Feedforward Layers | Encoder-Decoder, Multi-Head Attention, Feedforward | Encoder-Decoder, Attention Mechanisms, Feedforward | Transformer Layers, Feedforward Layers, Attention | Transformer Decoder, Feedforward Layers, Attention | Patch Embedding, Transformer Layers, Attention || **Open-Source/ Forbidden for Modifications** | Open-Source                     | Open-Source                        | Open-Source                          | Open-Source                          | Open-Source                          | Open-Source                          | Open-Source                          | Open-Source                          | Open-Source                          | Restricted for Modifications         | Open-Source                          | Open-Source                          || **Criteria of Measuring Model Productivity** | Reconstruction Loss             | Accuracy, Precision, Recall, F1-Score | Perplexity, Accuracy, BLEU Score (NLP) | Accuracy, Loss Reduction             | Perplexity, Accuracy (Time-Series, NLP) | Node Classification Accuracy, Link Prediction | F1-Score, Exact Match (QA), Perplexity | Rouge Score, BLEU Score             | Rouge Score, BLEU Score             | F1-Score, Rouge Score                | Perplexity, BLEU Score               | Accuracy, Precision, Recall, F1-Score || **Model's Parameters (Changeable/Non-Changeable)** | Weights (Changeable), Latent Dimensions (Fixed) | Filter Weights (Changeable), Input Channels (Fixed) | Hidden State (Changeable), Sequence Length (Fixed) | Weights (Changeable), Bias (Fixed)  | Cell Weights (Changeable), Memory Cell (Fixed) | Edge Weights (Changeable), Node Attributes (Fixed) | Token Embeddings (Changeable), Vocabulary (Fixed) | Attention Weights (Changeable), Vocabulary (Fixed) | Token Embeddings (Changeable), Vocabulary (Fixed) | Attention Weights (Changeable), Vocabulary (Fixed) | Attention Weights (Changeable), Vocabulary (Fixed) | Patch Embeddings (Changeable), Image Size (Fixed) || **Criteria of Measuring Parameter's Productivity** | Reconstruction Accuracy         | Detection Accuracy                 | Temporal Pattern Capture Efficiency  | Accuracy and Loss Reduction          | Long-Term Dependency Capture Efficiency | Graph Feature Capture Efficiency    | Contextual Understanding Quality     | Summarization and Translation Accuracy | Text-to-Text Conversion Accuracy    | Generative Output Accuracy           | Generative Text Coherence            | Image Feature Generalization         || **Model's Hyperparameters (Changeable/Non-Changeable)** | Learning Rate, Latent Dimension Size (Changeable) | Kernel Size, Stride, Number of Filters (Changeable) | Learning Rate, Hidden State Size (Changeable) | Learning Rate, Number of Layers (Changeable) | Learning Rate, Number of Layers (Changeable) | Number of Layers, Embedding Size (Changeable) | Learning Rate, Batch Size, Sequence Length (Changeable) | Learning Rate, Number of Heads (Changeable) | Sequence Length, Beam Width (Changeable) | Number of Layers, Head Size (Changeable) | Learning Rate, Model Depth, Token Limit (Changeable) | Patch Size, Attention Heads (Changeable) || **Criteria of Measuring Hyperparameter's Productivity** | Lower Reconstruction Error      | Higher Feature Extraction Quality  | Sequence Learning Performance        | Loss Convergence Rate                | Retention of Long-Term Dependencies  | Graph-Level Feature Generalization  | Contextual Embedding Accuracy        | Text Generation Quality              | Text Generation Coherence            | Latent Representation Consistency    | Generative Text Quality              | Visual Feature Learning Efficiency   || **Basic Components of Hyperparameter's Productivity** | Effective Latent Space Size, Training Convergence Rate | Filter Efficiency, Computational Cost | Effective Sequence Memory Size       | Layer Depth, Weight Initialization Strategy | Sequence Retention and Gradient Stability | Graph Topology Learning             | Attention Mechanism, Positional Encoding | Encoder-Decoder Consistency         | Attention Span, Latent Representation Quality | Layer-to-Layer Weight Propagation    | Token Context Understanding          | Patch Extraction Accuracy, Attention Span | -->]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Related to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../.</summary>
      
    
    
    
    <category term="Posts" scheme="https://ooge0.github.io/hexo-blog/categories/Posts/"/>
    
    
    <category term="AI" scheme="https://ooge0.github.io/hexo-blog/tags/AI/"/>
    
    <category term="NN" scheme="https://ooge0.github.io/hexo-blog/tags/NN/"/>
    
  </entry>
  
</feed>
